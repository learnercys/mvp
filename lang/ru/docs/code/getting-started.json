{
    "Getting Started": "Приступая к работе",
    "Welcome to the elementary Developer Guide! This book was created to teach you all about creating and distributing apps for elementary OS. The introduction will make sure that you have all the tools for the job and a solid understanding of what this book is about. Some of you may feel confident enough to jump straight into coding. If that's the case, you might want to skip ahead and start writing your first app.": "Добро пожаловать в руководство для разработчиков elementary OS! Эта книга была создана, чтобы научить вас создавать и распространять приложения для elementary. Вступление расскажет вам об инструментах, необходимых для работы, а также даст понять, о чем эта книга. Чувствуете себя достаточно уверенно, чтобы сразу приступить к программированию? Пропустите вступление и перейдите к созданию своего первого приложения!",
    "However, we strongly recommend to at least skim through this preparation step. Having the right setup is going to help you reach your goals faster, and having a solid foundation is going to help you throughout the rest of this book.": "Тем не менее, мы советуем вам хотя бы пробежаться по этому подготовительному тексту. Наличие подходящих инструментов поможет вам достичь своих целей быстрее, а также создаст твердый фундамент, который поможет вам в понимании остальных частей книги.",
    "What We Will And Won't Cover": "Что мы Вам покажем, а что не будем",
    "We're going to assume that you have absolutely no experience in writing apps for elementary. But we will assume some basic programming knowledge, and hopefully a little experience in Vala or at least similarly syntaxed languages. If you're not familiar with Vala, we highly encourage you to brush up on it before coming here.": "Вам не требуется иметь какой-либо опыт в разработке приложений для elementary. Но мы ожидаем знания основ программирования или хотя бы небольшого опыта в работе с объектно-ориентированным языком программирования Vala или схожих по синтаксису языках. Если вы не знакомы с подобным, советуем вам <a href=\"https://wiki.gnome.org/Projects/Vala\">изучить Vala</a> и вернуться позже.",
    "We’re also not covering design too much in this guide; that’s what the <a href=\"/docs/human-interface-guidelines\">Human Interface Guidelines</a> (HIG) are for, and you’re highly encouraged to take a look there before beginning your app. We're going to assume you have a basic knowledge of (or at least a quick link to) the HIG and focus on coding. However, elementary is all about great design and stellar consistency. It’s important you grasp these concepts before moving on.": "Мы не будем обращать много внимания на дизайн в этом руководстве, поскольку для этого есть соответствующие <a href=\"/docs/human-interface-guidelines\">рекомендации по дизайну интерфейса</a>. Тем не менее, мы предполагаем, что вы освоите их самостоятельно, прежде чем начнете работу над своим первым приложением.  Дизайн и непротиворечивость интерфейсов чрезвычайно важны для elementary.",
    "In this book, we're going to talk about building apps using GTK+, Granite, and other tech available in elementary, setting up a build system, hosting your code for collaborative development, working with translations, a few other bits and pieces, and finally packaging and distributing your new app.": "В этой книге мы будем говорить о разработке приложений с использованием GTK+, Granite и других технологий, доступных в elementary; о настройке системы сборки, публикации вашего кода для совместной разработки, работе с переводами; о нескольких других полезных вещах и, наконец, об упаковке и распространении вашего нового приложения.",
    "The Basic Setup": "Первичная подготовка",
    "Before we even think about writing code, you'll need a certain basic setup. This chapter will walk you through the process of getting set up. We will cover the following topics:": "Прежде чем приступить к написанию кода, вам потребуются определенные базовые настройки, и эта глава поможет вам их осуществить. Мы рассмотрим следующие темы:",
    "Creating an account in launchpad.net and importing an SSH key in Launchpad": "Создание аккаунта на launchpad.net и импорт SSH ключей",
    "Setting up the Bazaar revision control system": "Настройка системы управления версиями Bazaar",
    "Getting and using the elementary developer &quot;SDK&quot;": "Установка и использование комплекта средств разработчика \"SDK\" (Software Development Kit)",
    "We’re going to assume that you’re working from a clean installation of elementary OS Freya or later. This is important as the instructions you’re given may reference apps that are not present (or even available) in other Linux based operating systems like Ubuntu. It is possible to apply the principles of this guide to Ubuntu development, but it may be more difficult to follow along.": "Мы рассчитываем на то, что вы используете чистую elementary OS редакции Freya или более поздней. Это важно потому, что будут использованы приложения, которые недоступны для других дистрибутивов Linux (например Ubuntu). Применить данное руководство возможно для разработки на Ubuntu, но оно может отличаться и быть намного сложнее в некоторых моментах.",
    "Launchpad": "Launchpad",
    "Launchpad is a free online service provided by Canonical, the same people who brought you Ubuntu. It is used as a platform for hosting code, tracking milestones, tracking bugs, proposing designs, making translations, and more. Launchpad is a powerful resource, especially if you are a developer working with others. We're going to be using it for its various features throughout this book, so it's a good idea for you to sign up for an account. If you already have an account, feel free to move on to the next section.": "Launchpad это бесплатный сервис, предоставляемый компанией Canonical, которая также создала Ubuntu. Он используется в качестве платформы для хостинга кода, ведения ключевых моментов, отслеживания ошибок, реализации переводов и многого другого. Launchpad - это мощный ресурс для командной работы разработчиков. Мы будем использовать его для различных задач на протяжении всей книги, так что лучше всего, чтобы вы завели аккаунт на данном сайте. Если у вас уже есть аккаунт, то смело переходите к следующему разделу.",
    "To set up a Launchpad account:": "Чтобы завести аккаунт Launchpad:",
    "Go to <a href=\"https://launchpad.net\">Launchpad.net</a>. Click on <strong>Log in/Register</strong> in the top right corner of the page.": "Перейдите на <a href=\"https://launchpad.net\">Launchpad.net</a>. Кликните на <strong>Log in/Register</strong> в правом верхнем углу страницы.",
    "Select <strong>I am a new Ubuntu One user</strong> on the left side.": "Выберете <strong> Я новый пользователь Ubuntu One </strong> у левой стороны.",
    "Enter your information and click <strong>Create account</strong>.": "Введите информацию о себе и нажмите <strong>Create account</strong>.",
    "After you have verified your email your Launchpad account is ready, so let's move on to the next section. Remember, we're not going to go over all the little details in this book. We'll come back to Launchpad a few times later on to use specific features, but if you really want to learn everything there is to know about the website you should read their user guide. Onward!": "После подтверждения адреса электронной почты, ваша учетная запись на Launchpad готова, и мы можем перейти к следующему разделу. Помните, что в данной книге мы не будем отвлекаться на разные мелочи. На Launchpad мы вернемся немного позже, когда приступим к работе с более специфичными пунктами. Но если вы действительно хотите узнать о сервисе подробнее, вы можете прочитать больше о нём в Сети. Так что вперед!",
    "Bazaar": "Bazaar",
    "elementary projects are hosted on Launchpad. To interact with the code on Launchpad, we use a distributed <a href=\"http://en.wikipedia.org/wiki/Revision_control\">revision control system</a> called Bazaar. This allows multiple developers to collaboratively develop and maintain the code while keeping track of each revision along the way.": "Проекты elementary размещены на Launchpad. Для работы с кодом на Launchpad мы используем распределенную <a href=\"https://ru.wikipedia.org/wiki/Система_управления_версиями\">систему контроля версий</a> Bazaar. Она позволяет множеству разработчиков совместно разрабатывать и поддерживать код, сохраняя при этом историю каждого изменения.",
    "If you're ready, let's get you set up to use Bazaar:": "Вы готовы? Приступим к настройке Bazaar:",
    "Open the Terminal. You'll be interacting with Bazaar through a simple terminal-based program called bzr.": "Откройте терминал. Будем работать с Bazaar через консольную программу bzr.",
    "You'll need to install bzr. Simply type the following into the Terminal:": "Вам нужно будет установить bzr. Просто введите в терминале:",
    "To authenticate and transfer code securely, you’ll need to generate an <a href=\"http://en.wikipedia.org/wiki/Secure_Shell\">SSH</a> key pair (a kind of fingerprint for your computer) and import the public key in Launchpad. Type the following in terminal:": "Для аутентификации и безопасной передачи кода, вам понадобится сгенерировать пару ключей <a href=\"http://en.wikipedia.org/wiki/Secure_Shell\">SSH</a> (наподобие отпечатков пальца, но только для компьютера) и импортировать публичный ключ в Launchpad. В терминале введите следующие команды:",
    "When prompted, press Enter to accept the default file name for your key.": "При появлении запроса, нажмите Enter, чтобы принять используемое по умолчанию название для вашего ключа.",
    "Next, enter a password to protect your SSH key. You’ll be asked to enter it again, just to make sure you didn’t make any typos. You'll need to enter this password any time you try to push code to launchpad so don't forget it! Optionally, you can just press enter and use no password, but this is obviously less secure.": "Далее, введите пароль для защиты вашего SSH ключа. У вас запросят ввести его ещё раз, для того чтобы удостовериться, что вы не ошиблись. Вам надо будет вводить этот пароль всякий раз, когда вы попытаетесь опубликовать код на Launchpad, поэтому не забудте его и наберитесь терпения.",
    "Now, we're going to tell Launchpad about your SSH key. Open your SSH key with the following command, then copy the text from the file that opens in Scratch:": "Теперь мы собираемся рассказать о вашем SSH ключе сервису Launchpad. С помощью следующей команды откройте файл с вашим SSH ключом в текстовом редакторе Scratch,  а затем скопируйте его содержимое. ",
    "Visit <a href=\"https://launchpad.net/people/+me/+editsshkeys\">your SSH keys page</a>. Paste the text in the textbox and click <strong>Import public key</strong>.": "Перейдите на <a href=\"https://launchpad.net/people/+me/+editsshkeys\">страницу с вашими SSH ключами</a> и вставьте скопированный текст в текстовое поле и нажмите <strong>Import public key</strong>.",
    "Now you can connect bzr to your Launchpad account. You'll need your launchpad id, which you can look up at <a href=\"https://launchpad.net/people/+me\">your launchpad page</a>.": "Теперь вы можете подключить bzr к своему Launchpad аккаунту.  Для этого вам потребуется Launchpad ID, который вы можете найти на <a href=\"https://launchpad.net/people/+me\">своей странице</a>.",
    "Done! Now you can download source code hosted on Launchpad and upload your own code. We'll revisit using bzr in a minute, but for now you're logged in. For a more in-depth introduction to bzr, you can also check the complete <a href=\"http://doc.bazaar.canonical.com/latest/en/user-guide\">Bazaar User Guide</a> provided by Canonical.": "Вот и все! Теперь вы можете скачивать исходный код, размещенный на Launchpad, и загружать свой. Для более детального изучения Bazaar вы можете использовать <a href=\"http://doc.bazaar.canonical.com/latest/ru/user-guide\">Руководство пользователя по Bazaar</a>, предоставляемое Canonical.",
    "Developer &quot;SDK&quot;": "Инструментарий разработчика",
    "At the time of this writing, elementary doesn't have a full SDK like Android or iOS. But luckily, we only need a couple simple apps to get started writing code.": "На момент написания этой статьи elementary не имел собственного SDK, как Android или iOS. Но к счастью, для того, чтобы нам начать писать код, нужно совсем немного приложений.",
    "Scratch": "Scratch",
    "The first piece of our simple &quot;SDK&quot; is the code editor Scratch. This comes by default with elementary OS. It comes with some helpful features like syntax highlighting, auto-save, and the Folder Manager extension. There are other extensions for Scratch as well, like the Outline, Terminal or Devhelp extensions. Play around with what works best for you.": "Итак, первой частью нашего небольшого и простого пазла станет Scratch, в которо вы будете \"выцарапывать\" исходный код будущих приложений. Это стандартное приложение в elemntary OS. Scratch предоставляет чрезвычайно полезные функции, такие как подсветка синтаксиса, автосохранение документов и расширение к файловому менеджеру. Кроме этого существует достаточно много расширений, как Outline, Terminal или Devhelp. Установите необходимые для и продолжите путь!",
    "Terminal": "Командная строка",
    "We’re going to use Terminal in order to compile our code, push revisions to Bazaar (bzr), and other good stuff. Throughout this guide, we’ll be issuing Terminal commands. You should assume that any command is executed from the directory “Projects” in your home folder unless otherwise stated. Since elementary doesn’t come with that folder by default, you’ll need to create it.": "Использование консоли терминала будет важной частью вашей работы, ведь именно это поможет вам скомпилировать и отправить ваше приложение на Bazaar (bzr). К тому же, терминал - важная утилита, на которую опирается вся наша книга. Удостоверьтесь, что все команды исполняются из папки “Projects” в вашей домашней папке, которую необходимо предварительно создать. ",
    "Open Terminal and issue the following command:": "Откройте терминал и введите следующую команду:",
    "Development Libraries": "Библиотека разработчика",
    "In order to build apps you're going to need their development libraries. We can fetch a basic set of libraries with the following terminal command:": "Для создания и сборки ваших приложений, понадобятся некоторые библиотеки. Установите их:",
    "The command <code>apt-get build-dep</code> installs the build dependencies of an app in the repositories. In this case, we're fetching the development libraries needed to build Granite Demo, an example app. We'll talk more about Granite later, but keep in mind that if you want to build an app from source, you can usually get its build dependencies easily by using <code>apt-get build-dep</code>.": "Команда <code>apt-get build-dep</code> узнаёт, от каких других библиотек зависит исследуемое приложение. Ради примера узнаем зависимости простого приложения - Granite Demo. О Granite поговорим немного позже, но помните: легче всего получить приложение из исходных кодов или узнать о зависимостях приложения из <code>apt-get build-dep</code>.",
    "And with that, we're ready to dive into development! Let's move on!": "И вот теперь мы полностью готовы погрузиться в разработку! Поехали!",
    "Hello World": "Hello, world!",
    "The first app we’ll create will be a basic and generic “Hello World”. We’ll walk through the steps of creating folders to store our source code, compiling our first app, and pushing the project to a bzr branch. Let’s begin.": "Первым приложением, которое обязан создать каждый уважающий себя разработчик, станет привычный \"Hello World\". Мы пройдем через каждый этап, начиная с создания рабочей папки и заканчивая отправлением кода в ветку bzr. Итак...",
    "Setting Up": "Установка",
    "Apps on elementary OS are organized into standardized directories contained in your project's &quot;root&quot; folder. Let's create a couple of these to get started:": "Приложения на начальной OS организованы в стандартные каталоги, содержащихся в \"корневой\" папке вашего проекта. Для начала создадим несколько из них:",
    "Create your root folder called &quot;gtk-hello&quot;": "Создайте вашу корневую папку под названием \"gtk-hello\"",
    "Create a folder inside that one called &quot;src&quot;. This folder will contain all of our source code.": "Создайте папку внутри данной под названием \"src\". Эта папка будет содержать весь ваш исходный код.",
    "Later on, We'll talk about adding other directories like &quot;po&quot; and &quot;data&quot;. For now, this is all we need.": "Позже мы поговорим о добавлении таких папок как \"po\" и \"data\". На данный момент этого вполне достаточно.",
    "Gtk.Window and Gtk.Button": "Gtk.Window и Gtk.Button",
    "Now what you've been waiting for! We're going to create a window that contains a button. When pressed, the button will display the text &quot;Hello World!&quot; To do this, we're going to use a widget toolkit called GTK+ and the programming language Vala. Before we begin, we highly recommend that you do not copy and paste. Typing each section manually will help you to practice and remember. Let's get started:": "И теперь, то, чего вы ждали! Мы создадим окно с активными кнопками. Когда на кнопку нажать, то она отобразит сообщение \"Привет, Мир!\". Чтобы это осуществить, мы используем виджет GTK+ и язык программирования Vala.Прежде, чем мы начнем, мы настоятельно рекомендуем вам не заниматься копипастом! Пропечатывание каждой стадии поможет вам укрепить свое знание. Давайте начнем:",
    "Create a new file in Scratch and save it as &quot;gtk-hello.vala&quot; inside your &quot;src&quot; folder": "Создайте новый файл в Scratch и сохраните его как \"gtk-hello.vala\" внутри папки \"src\"",
    "First we must create the main function of our new GTK app. Type the following in your &quot;gtk-hello.vala&quot;.": "Во-первых, мы должны создать основную функцию нашего нового GTK приложения. Введите следующее в вашем \"gtk-hello.vala\".",
    "Now, that we've initialized Gtk, we'll create a new window and declare a few properties of this window. You'll notice that most of these property names are pretty straightforward. Try to guess what each one does and we'll explain in a second. Type the following after the <code>Gtk.init</code> line, but before the last bracket:": "Теперь, когда мы инициализировали Gtk, мы создадим новое окно и объявим некоторые его свойства. Вы заметите, что большинство имен этих свойств довольно просты. Попробуйте догадаться, что делает каждое из них, а мы через секунду объясним. Введите следующее после строки <code>Gtk.init</code>, но перед последней скобкой:",
    "The first line creates a new <code>Gtk.Window</code> called &quot;window&quot;. The second line sets the window title that you see at the top of the window. next, we create a margin inside that window so that widgets don't bump up against the window's edge. Then we tell the window manager that we want to place this window in the center of the screen instead of in the default position (which is usually the top left). We also must give our window a default size so that is does not appear too small for the user to interact with it. Finally, we explain what to do with this process if the main window is closed; In our case, we want to quit.": "Первая строка создает новое \"окно\" <code>Gtk.Window</code>. Вторая строка устанавливает заголовок окна, который вы видите в его верхней части. Далее мы создаем отступ внутри этого окна, так что виджеты не натыкаются на его края. Затем мы говорим оконному менеджеру, что хотим разместить окно в центре экрана вместо позиции по умолчанию (которая обычно в верхнем левом углу). Мы также должны дать нашему окну размер по умолчанию, чтобы оно не оказалось слишком маленьким. И наконец, мы объясняем, что делать с этим процессом, если главное окно закрылось; в нашем случае мы хотим выйти.",
    "Now that we've defined a nice window, let's put a button inside of it. After our window stuff (but before <code>Gtk.main</code> line), leave a new line and then type the following:": "Теперь, когда мы определили хорошее окно, давайте поместим в него кнопку. После кода нашего окна (но перед строкой <code>Gtk.main</code>), оставьте пустую строку и наберите следующее:",
    "Any ideas about what happened here? We've created a new <code>Gtk.Button</code> with the label &quot;Click me!&quot;. Then we've said that if this button is clicked, we want to change the label to say &quot;Hello World!&quot; instead. We've also said that we want to make the button insensitive; We do this because clicking the button again has no visible effect. Finally, we add the button to our <code>Gtk.Window</code> and declare that we want to show all of the window's contents.": "Есть идеи о том, что здесь произошло? Мы создали новую <code>Gtk.Button</code> с надписью \"Click me!\". Затем мы сказали, что при нажатии на кнопку мы хотим изменить ее надпись на \"Hello World!\". Еще мы сказали, что хотим сделать кнопку нечувствительной; мы сделали это, потому что повторное нажатие на кнопку не имеет визуального эффекта. И наконец, мы добавили кнопку в наше <code>Gtk.Window</code> и заявили, что хотим показать все содержимое окна.",
    "Compiling and Running your code": "Компилирование и запуск Вашего исходного кода",
    "Ready to test it out? Fire up your terminal and make sure you're in &quot;~/Projects/gtk-hello/src&quot;. Then execute the following commands to compile and run your first Gtk app:": "Готовы протестировать его? Запускайте свой терминал и убедитесь, что вы в \"~/Projects/gtk-hello/src\". После, запускайте следующие команды для того, чтобы скомпилировать и запустить ваше первое приложение  GTK.",
    "Did it work? If so, congratulations! If not, read over your source code again and look for errors. Also check the output of your terminal. Usually there is helpful output that will help you track down your mistake.": "Сработало? Если да, наши поздравления! Если нет, прочтите исходный код и отыщите в нем ошибки. Так же проверьте выход терминала. Обычно в нем есть полезная информация, которая поможет отследить вашу ошибку.",
    "Pushing to Launchpad": "Продвижение в Launchpad",
    "After we do anything significant, we must remember to push our code. This is especially important in collaborative development where not pushing your code soon enough can lead to unintentional forks and pushing too much code at once can make it hard to track down any bugs introduced by your code. So let's take a minute to revisit our friend <code>bzr</code>:": "After we do anything significant, we must remember to push our code. This is especially important in collaborative development where not pushing your code soon enough can lead to unintentional forks and pushing too much code at once can make it hard to track down any bugs introduced by your code. So let's take a minute to revisit our friend <code>bzr</code>:",
    "Open Terminal and make sure you're in your project's root directory &quot;~Projects/gtk-hello&quot;": "Откройте Терминал и убедитесь, что вы в корневой папке вашего проекта\n\"~Projects/gtk-hello\"",
    "With these commands, we've told <code>bzr</code> to track this folder as a branch, that we'd like to track revisions on the file &quot;gtk-hello.vala&quot;, we've committed our first revision and explained what we did in the revision, and then we've told <code>bzr</code> to push your code to Launchpad in your <a href=\"https://code.launchpad.net/people/+me/\">junk folder</a>.": "Этими командами мы сказали <code>bzr</code> отслеживать данную папку как ветвь, в которой мы хотим",
    "Victory!": "Победа!",
    "Let's recap what we've learned to do in this first section:": "Давайте повторим, что мы успели изучить в первой секции",
    "We created a new project containing a &quot;src&quot; folder": "Мы создали новый проект, в котором содержится папка \"src\"",
    "We created our main vala file and inside it we created a new <code>Gtk.Window</code> and <code>Gtk.Button</code>": "Мы создали наш главный файл и внутри него создали новые <code>Gtk.Window</code> и <code>Gtk.Button</code>",
    "We built and ran our app to make sure that everything worked properly": "Мы построим и запустим наше приложение, чтобы убедиться, что все работает, как надо",
    "Finally, we commited our first revision and pushed code to Launchpad": "Наконец, мы совершили нашу первую ревизию и продвинули код в Launchpad",
    "Feel free to play around with this example. Make the window a different size, set different margins, make the button say other things. When you're comfortable with what you've learned, go on to the next section.": "Свободно поиграйтесь с этим примером. Измените размер окна, установите разные границы, заставьте кнопку делать различные вещи. Когда Вы почувствуйте, что готовы, двигайтесь дальше.",
    "A Note About Libraries": "Заметка о библиотеках",
    "Remember how when we compiled our code, we used the <code>valac</code> command and the argument <code>--pkg gtk+-3.0</code>? What we did there was make use of a &quot;library&quot;. If you're not familiar with the idea of libraries, a library is a collection of methods that your program can use. So this argument tells <code>valac</code> to include the GTK+ library (version 3.0) when compiling our app.": "Помните как мы использовали команду <code>valac</code> с параметром <code>--pkg gtk+-3.0</code>, когда компилировали наш код? Так мы использовали \"библиотеку\". Если вы не знакомы с идеей библиотек, то библиотека - это набор методов, которые может использовать ваша программа. Таким образом, этот параметр говорит <code>valac</code> включить  библиотеку GTK+ (версии 3.0) при компиляции приложения.",
    "In our code, we've used the <code>Gtk</code> &quot;Namespace&quot; to declare that we want to use methods from GTK+ (specifically, <code>Gtk.Window</code> and <code>Gtk.Button.with_label</code>). Notice that there is a hierarchy at play. If you want to explore that hierarchy in more detail, you can <a href=\"http://www.valadoc.org/#!api=gtk+-3.0/Gtk.Button\">check out Valadoc</a>.": "В нашем коде мы использовали \"пространство имен\" <code>Gtk</code>, чтобы объявить, что мы хотим использовать методы из GTK+ (а именно <code>Gtk.Window</code> и <code>Gtk.Button.with_label</code>). Обратите внимание на то, что существует иерархия. Если вы хотите изучить эту иерархию более подробно, обратитесь к <a href=\"http://www.valadoc.org/#!api=gtk+-3.0/Gtk.Button\">Valadoc</a>.",
    "Our First App": "Наше первое приложение",
    "In the previous chapter, we created a simple &quot;Hello World!&quot; app to show off our vala and Gtk skills. But what if we wanted to share our new app with a friend? They'd have to know which packages to include with the <code>valac</code> command we used to build our app, and after they'd built it they'd have to run it from the build directory like we did. Clearly, we need to do some more stuff to make our app fit for people to use, to make it a <em>real</em> app.": "В предыдущей главе мы создали простое приложение \"Hello World!\", чтобы похвастаться нашими навыками Vala и Gtk. Но что, если бы мы хотели поделиться нашим приложением с другом? Они должны были бы знать какие пакеты включить командой <code>valac</code>, которой мы собрали приложение, а после собрать его и запустить из папки build, как делали это мы. Очевидно, нам нужно сделать еще некоторые вещи, чтобы приложение было пригодно к использованию людьми, сделать его <em>настоящим</em> приложением.",
    "Hello (again) World!": "Hello (again) World!",
    "To create our first real app, we're going to need all the old stuff that we used in the last example. But don't just copy and paste! Let's take this time to practice our skills and see if we can recreate the last example from memory. Additionally, now that you have the basics, we're going to get a little more complex and a little more organized:": "Чтобы создать первую настоящую программу, нам понадобится все то, что мы использовали в последнем примере. Только, пожалуйста, не занимайтесь простым копированием! Давайте уделим некоторое время тренировке навыков и убедимся, что вы можете повторить то, что вы сделали в последнем задании по памяти. Кроме того, сейчас, когда вы усвоили основы, мы попробуем усложнить задачу и быть немного более последовательны: ",
    "Create a new folder in &quot;~/Projects&quot; called &quot;hello-world&quot; and put our last project in that folder. Now create a new folder inside &quot;~/Projects/hello-world&quot; called &quot;hello-again&quot;. We're doing this because our first &quot;gtk-hello&quot; and &quot;hello-again&quot; are two branches of the same &quot;hello-world&quot; project. As you get more into collaborative development, you're going to have lots of branches. This method will help you stay organized.": "Создайте новую папку в \"~/Projects\", назовите её \"hello-again\" и перенесите туда наш последний проект. Теперь создайте  еще одну папку уже внутри \"~/Projects/hello-again\" так же назвав её \"hello-again\". Мы поступаем так потому, что наш первый проект \"gtk-hello\" и текущий \"hello-again\" оба являются ветками проекта \"hello-world\". (Как только вы займетесь совместной разработкой, у вас появится множество таких веток.) Такая структура папок поможет вам сохранить удобную организацию.",
    "Now go into &quot;hello-again&quot; and create our directory structure including the &quot;src&quot; folder.": "Теперь зайдите в \"hello-again\" и создайте в ней нужную структуру папок, включая папку \"src\".",
    "Create &quot;hello-again.vala&quot; in the &quot;src&quot; folder.  This time we're going to prefix our file with a small legal header. More about legal stuff later. For now, just copy and paste this, changing out <code>YourName</code> for your actual name:": "Создайте \"hello-again.vala\" в папке \"src\". На этот раз мы  добавим в начало файла немного информации о лицензии. Далее мы рассмотрим эту тему подробнее, а пока, просто скопируйте и вставьте данный текст, заменив <code>YourName</code> на ваше настоящее имя:",
    "Now, let's create our main function, a <code>Gtk.Window</code>, and set the window's default properties. Refer back to the last chapter if you need a refresher.": "Теперь давайте создадим нашу главную функцию <code>Gtk.Window</code> и настроим стандартные параметры окна. Вернитесь к предыдущей главе, если вам нужно освежить в памяти, как это делается.",
    "For the sake of time let's just put a <code>Gtk.Label</code> instead of a <code>Gtk.Button</code>. We don't need to try to make the label do anything when you click it.": "Чтобы сэкономить время давайте используем <code>Gtk.Label</code> вместо <code>Gtk.Button</code>. Чтобы не настраивать действие по щелчку.",
    "Don't forget to add it to your window and show the window's contents:": "Не забудьте включить созданную переменную в окно и позаботьтесь о его вызове:",
    "Build &quot;hello-again.vala&quot; just to make sure it all works. If something goes wrong here, feel free to refer back to the last chapter and remember to check your terminal output for any hints.": "Соберите \"hello-again.vala\" чтобы убедиться, что все работает. Если что то пошло не так, вернитесь к предыдущей главе и не забудьте прочитать вывод терминала чтобы понять причину.",
    "Initialize the branch, add your files to the project, and write a commit message using what you learned in the last chapter. Lastly, push your first revision with <code>bzr</code>:": "Initialize the branch, add your files to the project, and write a commit message using what you learned in the last chapter. Lastly, push your first revision with <code>bzr</code>:",
    "Everything working as expected? Good. Now, let's get our app ready for other people to use.": "Все работает, как надо? Отлично. Теперь наше приложение готово к использованию другими людьми.",
    "The .desktop File": "Файл .desktop",
    "Every app comes with a .desktop file. This file contains all the information needed to display your app in the Applications menu and in the Dock. Let's go ahead and make one:": "Каждое приложение сопровождается с файлом формата .desktop. Этот файл содержит всю информацию, необходимую для отображения приложения в главном меню и панели быстрого запуска. Давайте двигаться вперед и создадим первое:",
    "In your project's root, create a new folder called &quot;data&quot;.": "В корне вашего проекта создайте папку с названием \"data\".",
    "Create a new file in scratch and save it in the &quot;data&quot; folder as &quot;hello.desktop&quot;.": "Создайте новый файл в scratch и сохраните его в папку \"data\" в \"hello.desktop\".",
    "Type the following into &quot;hello.desktop&quot;. Like before, try to guess what each line does.": "Введите следующее в \"hello.desktop\". Как и прежде, попробуйте догадаться, что делает каждая строка.",
    "The first line declares that this file is a &quot;Desktop Entry&quot; file. The next three lines are descriptions of our app: The branded name of our app, a generic name for our app, and a comment that describes our app's function. Next, we categorize our app. Then, we say what command will execute it. Finally, we give our app an icon (a generic one included in elementary OS) and let the OS know that this isn't a command line app. For more info about crafting .desktop files, check out <a href=\"/docs/human-interface-guidelines/app-launchers\">this HIG entry</a>.": "The first line declares that this file is a \"Desktop Entry\" file. The next three lines are descriptions of our app: The branded name of our app, a generic name for our app, and a comment that describes our app's function. Next, we categorize our app. Then, we say what command will execute it. Finally, we give our app an icon (a generic one included in elementary OS) and let the OS know that this isn't a command line app. For more info about crafting .desktop files, check out <a href=\"/docs/human-interface-guidelines/app-launchers\">this HIG entry</a>.",
    "Finally, let's add this file to bzr and commit a revision:": "Finally, let's add this file to bzr and commit a revision:",
    "Legal Stuff": "Legal Stuff",
    "Since we're going to be putting our app out into the wild, we should include some information about who wrote it and the legal usage of its source code. For this we need two new files in our project's root folder: AUTHORS and COPYING.": "Since we're going to be putting our app out into the wild, we should include some information about who wrote it and the legal usage of its source code. For this we need two new files in our project's root folder: AUTHORS and COPYING.",
    "Authors": "Авторы",
    "The AUTHORS file is pretty straightforward. This file contains your name and email address along with the name and email address of anyone who helped you make your app. It typically looks like this:": "The AUTHORS file is pretty straightforward. This file contains your name and email address along with the name and email address of anyone who helped you make your app. It typically looks like this:",
    "Copying": "Копирование",
    "The COPYING file contains a copy of the license that your code is released under. For elementary apps this is typically the <a href=\"http://www.gnu.org/licenses/quick-guide-gplv3.html\">GNU Public License</a> (GPL). Remember the header we added to our source code? That header reminds people that your app is licensed and it belongs to you. You can choose other licenses like the MIT license as well, but for this example let's stick to the <a href=\"http://www.gnu.org/licenses/gpl-3.0.txt\">GPL</a>.": "The COPYING file contains a copy of the license that your code is released under. For elementary apps this is typically the <a href=\"http://www.gnu.org/licenses/quick-guide-gplv3.html\">GNU Public License</a> (GPL). Remember the header we added to our source code? That header reminds people that your app is licensed and it belongs to you. You can choose other licenses like the MIT license as well, but for this example let's stick to the <a href=\"http://www.gnu.org/licenses/gpl-3.0.txt\">GPL</a>.",
    "Mark Your Progress": "Оцените свой прогресс",
    "Did you remember to add these files to bzr and commit a revision? Each time we add a new file or make a significant change it's a good idea to commit a new revision and push to Launchpad. Keep in mind that this acts as a backup system as well; when we push our work to Launchpad, we know it's safe and we can always revert to a known good revision if we mess up later.": "Did you remember to add these files to bzr and commit a revision? Each time we add a new file or make a significant change it's a good idea to commit a new revision and push to Launchpad. Keep in mind that this acts as a backup system as well; when we push our work to Launchpad, we know it's safe and we can always revert to a known good revision if we mess up later.",
    "Now that we've got all these swanky files laying around, we need a way to tell the computer what to do with them. Ready for the next chapter? Let's do this!": "Now that we've got all these swanky files laying around, we need a way to tell the computer what to do with them. Ready for the next chapter? Let's do this!",
    "The Build System": "Система сборки",
    "The next thing we need is a build system. The build system that we're going to be using is called <a href=\"http://www.cmake.org\">CMake</a>. We already installed the <code>cmake</code> program at the beginning of this book when we got the build dependencies for Granite Demo. What we're going to do in this step is get a copy of some additional modules for Cmake (support for Vala, translations, etc), and create the files that tell Cmake how to install your program. This includes all the rules for building your source code as well as correctly installing your .desktop file and the binary app that results from the build process.": "Следующее, что нам нужно - это система сборки. Система сборки, которую мы собираемся использовать, называется <a href=\"http://www.cmake.org\">CMake</a>. Мы уже установили программу <code>cmake</code> в начале книги, когда собирали зависимости для Granite Demo. На этом шаге нам нужно получить копию некоторых дополнительных модулей для Cmake (поддержка Vala, переводы и т.д.) и создать файлы, которые объяснят Cmake как установить вашу программу. Это включает все правила сборки вашего исходного кода. а также правильную установку файла .desktop и бинарное приложение, полученное после процесса сборки.",
    "The elementary apps team maintains a copy of the CMake modules that we're going to need. Make sure you're in &quot;~/Projects&quot; (not in your hello-again folder) and then grab the latest copy of those modules with bzr. Notice that we're not in &quot;~/Projects/hello-world&quot;. This is because our cmake modules are not a branch of our Hello World app:": "The elementary apps team maintains a copy of the CMake modules that we're going to need. Make sure you're in \"~/Projects\" (not in your hello-again folder) and then grab the latest copy of those modules with bzr. Notice that we're not in \"~/Projects/hello-world\". This is because our cmake modules are not a branch of our Hello World app:",
    "You'll see a folder called &quot;cmake&quot;. Copy that into your &quot;hello-again&quot; folder. It's that easy.": "Вы увидите папку с названием \"cmake\". Скопируйте её в папку \"hello-again\". Это просто.",
    "Create a new file in your project's root folder called &quot;CMakeLists.txt&quot;. Since this file is a bit long, we've included some comments along the way to explain each section. You don't have to copy those, but type the rest into that file:": "Create a new file in your project's root folder called \"CMakeLists.txt\". Since this file is a bit long, we've included some comments along the way to explain each section. You don't have to copy those, but type the rest into that file:",
    "And you're done! Your app now has a real build system. Don't forget to add these files to bzr and push to launchpad. This is a major milestone in your app's development!": "And you're done! Your app now has a real build system. Don't forget to add these files to bzr and push to launchpad. This is a major milestone in your app's development!",
    "Building and Installing with CMake": "Скомпилируйте и установите используя CMake",
    "Now that we have a build system, let's try it out:": "Теперь, когда мы собрали систему, давайте попробуем её в действии:",
    "Create a new folder in your project's root folder called &quot;build&quot;": "В корне вашего проекта создайте папку с названием \"build\"",
    "Change into this directory in terminal and execute the following command:": "Перейдите в эту директорию в терминале и выполните следующую команду:",
    "This command tells cmake to get ready to build our app using the prefix &quot;/usr&quot;. The <code>cmake</code> command defaults to installing our app locally, but we want to install our app for all users on the computer.": "Эта команда сообщает cmake, что нужно приготовиться собрать наше приложение, используя префикс \"/usr\". Команда <code>cmake</code> по умолчанию устанавливает наше приложение локально, но мы хотим установить его для всех пользователей компьютера.",
    "Build your app with <code>make</code> and if successful install it with <code>sudo make install</code>:": "Соберите приложение с помощью <code>make</code> и в случае успеха установите его командой <code>sudo make install</code>:",
    "If all went well, you should now be able to open your app from the Applications menu and pin it to the Dock.  If you were about to add the &quot;build&quot; folder to your bzr branch and push it, stop! This binary was built for your computer and we don't want to redistribute it. In fact, we built your app in a separate folder like this so that we can easily delete or ignore the &quot;build&quot; folder and it won't mess up our app's source code.": "If all went well, you should now be able to open your app from the Applications menu and pin it to the Dock.  If you were about to add the \"build\" folder to your bzr branch and push it, stop! This binary was built for your computer and we don't want to redistribute it. In fact, we built your app in a separate folder like this so that we can easily delete or ignore the \"build\" folder and it won't mess up our app's source code.",
    "We'll revisit CMake again later to add some more complicated behavior, but for now this is all you need to know to give your app a proper build system. If you want to explore CMake a little more on your own, you can always check out <a href=\"http://www.cmake.org/cmake/help/documentation.html\">CMake's documentation</a>.": "We'll revisit CMake again later to add some more complicated behavior, but for now this is all you need to know to give your app a proper build system. If you want to explore CMake a little more on your own, you can always check out <a href=\"http://www.cmake.org/cmake/help/documentation.html\">CMake's documentation</a>.",
    "Review": "Обзор",
    "Let's review what all we've learned to do:": "Давайте рассмотрим все, что мы научились делать:",
    "Create a new Gtk app using <code>Gtk.Window</code>, <code>Gtk.Button</code>, and <code>Gtk.Label</code>": "Создавать новое Gtk приложение, используя <code>Gtk.Window</code>, <code>Gtk.Button</code> и <code>Gtk.Label</code>",
    "Keep our projects organized into branches": "Организовывать наши проекты в ветви",
    "License our app under the GPL and declare our app's authors in a standardized manner": "Лицензировать наше приложение лицензией GPL и объявлять авторов приложения стандартизированным способом",
    "Create a .desktop file that tells the computer how to display our app in the Applications menu and the Dock": "Создайте файл формата .desktop, который указывает компьютеру как отображать наше приложение в главном меню и панели быстрого запуска",
    "Set up a CMake build system that contains all the rules for building our app and installing it cleanly": "Настраивать систему сборки CMake, которая содержит все правила сборки нашего приложения и его аккуратной установки",
    "That's a lot! You're well on your way to becoming a bonified app developer for elementary OS. Give yourself a pat on the back, then take some time to play around with this example. Change the names of files and see if you can still build and install them properly. Ask another developer to branch your project from launchpad and see if it builds and installs cleanly on their computer. If so, you've just distributed your first app! When you're ready, we'll move onto the next section: Packaging.": "That's a lot! You're well on your way to becoming a bonified app developer for elementary OS. Give yourself a pat on the back, then take some time to play around with this example. Change the names of files and see if you can still build and install them properly. Ask another developer to branch your project from launchpad and see if it builds and installs cleanly on their computer. If so, you've just distributed your first app! When you're ready, we'll move onto the next section: Packaging.",
    "Adding Translations": "Добавление переводов",
    "Now that you've learned about CMake, the next step is to make your app able to be translated to different languages. The first thing you need to know is how to convert strings in your code into translatable strings. Here's an example:": "Теперь, когда вы узнали о CMake, следующий шаг - сделать ваше приложение переводимым на другие языки. Первая вещь, которую вам нужно знать - как преобразовать строки в вашем коде в переводимые строки. Вот пример:",
    "See the difference? We just added <code>_()</code> around the string! Well, that was easy!": "Видите разницу? Мы только добавили <code>_()</code> вокруг строки! Что ж, это было просто!",
    "Go back to your project and make all your strings translatable by adding <code>_()</code>": "Вернитесь в проект и сделайте все строки переводимыми, добавив <code>_()</code>",
    "Add the following lines in the &quot;CMakeLists.txt&quot; file you created a moment ago:": "Добавьте следующие строки в только что созданный файл \"CMakeLists.txt\":",
    "Create a directory named &quot;po&quot; on the root folder of your project. Inside of your po directory you will need to create another CMakeLists.txt file. This time, it's contents will be:": "Создайте папку с именем \"po\" в корневой папке проекта. Внутри нее вам нужно будет создать другой файл CMakeLists.txt. В этот раз его содержимое будет таким:",
    "On your build directory execute the following commands:": "В Вашей рабочей директории выполните следующие комманды:",
    "Don't forget to add this new directory and it's contents to bzr": "Не забудьте добавить эту новую папку и ее содержимое в bzr",
    "That's it! CMake will automatically add all the string marked with <code>_()</code> into a .pot template file, and a file for each available language where you'll place the translatable strings.": "That's it! CMake will automatically add all the string marked with <code>_()</code> into a .pot template file, and a file for each available language where you'll place the translatable strings.",
    "Packaging": "работа с пакетами",
    "While having a build system is great, our app still isn't ready for regular users. We want to make sure our app can be built and installed without having to use Terminal. What we need to do is package our app. To do this, we use the Debian packaging format (.deb) on elementary OS. This section will teach you how to package your app as a .deb file, hosted in a Personal Package Archive (PPA) on Launchpad. This will allow normal people to install your app and even get updates for it in Update Manager.": "Несмотря на наличие системы сборки, наше приложение все еще не готово для обычных пользователей. Мы хотим убедиться, что наше приложение можно собрать и установить без использования Терминала. Что нам нужно, так это упаковать приложение. Для этого мы используем формат пакетов Debian (.deb) в elementary OS. Этот раздел научит вас как упаковать приложение в .deb файл и разместить его в архиве персональных пакетов (PPA) на Launchpad. Это позволит обычным людям установить ваше приложение и даже получать обновления для него в Менеджере Обновлений.",
    "Practice Makes Perfect": "Practice Makes Perfect",
    "If you want to get really good really fast, you're going to want to practice. Repetition is the best way to commit something to memory. So let's recreate our entire Hello World app again <em>from scratch</em>:": "If you want to get really good really fast, you're going to want to practice. Repetition is the best way to commit something to memory. So let's recreate our entire Hello World app again <em>from scratch</em>:",
    "Create a new branch folder &quot;hello-packaging&quot;": "Создать новую отдельную папку \"hello-packaging\"",
    "Set up our directory structure including the &quot;src&quot; and &quot;data&quot; folders.": "Установите нашу структуру каталогов которая включает в себя \"src\" и \"data\" папки.",
    "Add your Authors, Copying, .desktop, and source code.": "Add your Authors, Copying, .desktop, and source code.",
    "Now set up the CMake build system.": "Теперь давайте настроим систему сборки CMake.",
    "Test everything!": "Проверьте все!",
    "Did you commit and push to launchpad for each step? Keep up these good habits and let's get to packaging this app!": "Did you commit and push to launchpad for each step? Keep up these good habits and let's get to packaging this app!",
    "Debian Control": "Debian Control",
    "Now it's time to create the rules that will allow your app to be built as a .deb package. Let's dive right in:": "Now it's time to create the rules that will allow your app to be built as a .deb package. Let's dive right in:",
    "Like CMake, elementary maintaines a simple version of the &quot;debian&quot; folder that contains all the files we need for packaging. Let's grab a copy of that with bzr:": "Like CMake, elementary maintaines a simple version of the \"debian\" folder that contains all the files we need for packaging. Let's grab a copy of that with bzr:",
    "Copy the &quot;debian&quot; folder from that branch into your &quot;hello-packaging&quot; folder.": "Скопируйте папку \"debian\" c этой ветки в Вашу папку \"hello-packaging\"",
    "Open the file called &quot;changelog&quot; and make it look like below:": "Open the file called \"changelog\" and make it look like below:",
    "The first line contains your app's binary name, version, OS codename, and how urgently your package should be built. Remember that your app's binary name is lowercase and does not contain spaces. After the <code>*</code> is a list of your changes. Finally, you include your name, email address, and the date. For more information about the debian changelog, make sure to read the <a href=\"http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog\">documentation</a>.": "The first line contains your app's binary name, version, OS codename, and how urgently your package should be built. Remember that your app's binary name is lowercase and does not contain spaces. After the <code>*</code> is a list of your changes. Finally, you include your name, email address, and the date. For more information about the debian changelog, make sure to read the <a href=\"http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog\">documentation</a>.",
    "Open the file called &quot;control&quot; and make it look like below:": "Open the file called \"control\" and make it look like below:",
    "Open the file called &quot;copyright&quot;. We only need to edit what's up top:": "Open the file called \"copyright\". We only need to edit what's up top:",
    "That wasn't too bad right? We'll set up more complicated packaging in the future, but for now this is all you need. If you'd like you can always read <a href=\"http://www.debian.org/doc/debian-policy/\">more about Debian packaging</a>.": "That wasn't too bad right? We'll set up more complicated packaging in the future, but for now this is all you need. If you'd like you can always read <a href=\"http://www.debian.org/doc/debian-policy/\">more about Debian packaging</a>.",
    "Launchpad Recipes": "Рецепты Launchpad",
    "Now that we have our &quot;debian&quot; folder in order, it's time to go to launchpad and create a recipe: instructions what code to build, how often to build it, and where to put the resulting packages.": "Теперь когда наша папка \"debian\" в порядке, пришло время зайти на launchpad и создать рецепт: инструкции о том, какой код собирать, как часто его собирать и куда складывать полученные пакеты.",
    "<a href=\"https://code.launchpad.net/people/+me/+junk/hello-packaging/+new-recipe\">Click this link</a> or go to Launchpad, find your hello-packaging branch, then select <strong>Create packaging recipe</strong>.": "<a href=\"https://code.launchpad.net/people/+me/+junk/hello-packaging/+new-recipe\">Click this link</a> or go to Launchpad, find your hello-packaging branch, then select <strong>Create packaging recipe</strong>.",
    "Read through the options available to you. You can go ahead and keep the defaults for Name, Description (it's blank), Owner, Daily builds, and PPA but you can also customize a bit if you'd like.": "Read through the options available to you. You can go ahead and keep the defaults for Name, Description (it's blank), Owner, Daily builds, and PPA but you can also customize a bit if you'd like.",
    "When you get down to a set of checkboxes with the header &quot;Default distribution series&quot;, make sure you select &quot;Trusty&quot;. elementary OS Freya shares it's core with Ubuntu Trusty, so packages built on Trusty will also work on Freya.": "When you get down to a set of checkboxes with the header \"Default distribution series\", make sure you select \"Trusty\". elementary OS Freya shares it's core with Ubuntu Trusty, so packages built on Trusty will also work on Freya.",
    "For recipe text, we're going to change it ever so slightly to conform better with the official Debian rules. Change out the first line for this one:": "For recipe text, we're going to change it ever so slightly to conform better with the official Debian rules. Change out the first line for this one:",
    "Notice that this is ever so slightly different from the default line which includes <code>{debupstream}-0~{revno}</code> instead of <code>{debupstream}+r{revno}-0</code>.": "Notice that this is ever so slightly different from the default line which includes <code>{debupstream}-0~{revno}</code> instead of <code>{debupstream}+r{revno}-0</code>.",
    "When you're happy with the options you've chosen, select <strong>Create Recipe</strong>.": "When you're happy with the options you've chosen, select <strong>Create Recipe</strong>.",
    "Now that you've created a recipe, you only have to wait until Launchpad finishes the build! If everything goes as planned, your new PPA will contain a packaged app which other people can install and run with ease. Additionally, anyone using your PPA will be able to get updates for your app if you upload a new version. We'll talk more about how to do that later.": "Now that you've created a recipe, you only have to wait until Launchpad finishes the build! If everything goes as planned, your new PPA will contain a packaged app which other people can install and run with ease. Additionally, anyone using your PPA will be able to get updates for your app if you upload a new version. We'll talk more about how to do that later.",
    "Creating Layouts": "Создание разметок",
    "Now that you know how to code, build, and distribute an app using Vala, Gtk, CMake, and Launchpad PPAs, it’s time to learn a little bit more about how to build out your app into something really useful. The first thing we need to learn is how to lay out widgets in our window. But we have a fundamental problem: We can only add one widget (one “child”) to <code>Gtk.Window</code>. So how do we get around that to create complex layouts in a Window? We have to add a widget that can contain multiple children. One of those widgets is <code>Gtk.Grid</code>.": "Now that you know how to code, build, and distribute an app using Vala, Gtk, CMake, and Launchpad PPAs, it’s time to learn a little bit more about how to build out your app into something really useful. The first thing we need to learn is how to lay out widgets in our window. But we have a fundamental problem: We can only add one widget (one “child”) to <code>Gtk.Window</code>. So how do we get around that to create complex layouts in a Window? We have to add a widget that can contain multiple children. One of those widgets is <code>Gtk.Grid</code>.",
    "Widgets as Subclasses of Other Widgets": "Виджеты, как подклассы других виджетов",
    "Before we get into <code>Gtk.Grid</code>, let’s stop for a second and take some time to understand Gtk a little better. At the lower level, Gtk has classes that define some pretty abstract traits of widgets such as <a href=\"http://valadoc.org/#!api=gtk+-3.0/Gtk.Container\"><code>Gtk.Container</code></a> and <a href=\"http://valadoc.org/#!api=gtk+-3.0/Gtk.Orientable\"><code>Gtk.Orientable</code></a>. These aren’t widgets that we’re going to use directly in our code, but they’re used as building blocks to create the widgets that we do use. It’s important that we understand this, because it means that when we understand how to add children to a <code>Gtk.Container</code> like <code>Gtk.Grid</code>, we also understand how to add children to a <code>Gtk.Container</code> like <code>Gtk.Toolbar</code>. Both Grid and Toolbar are widgets that are subclasses of the more abstract class <code>Gtk.Container</code>.": "Before we get into <code>Gtk.Grid</code>, let’s stop for a second and take some time to understand Gtk a little better. At the lower level, Gtk has classes that define some pretty abstract traits of widgets such as <a href=\"http://valadoc.org/#!api=gtk+-3.0/Gtk.Container\"><code>Gtk.Container</code></a> and <a href=\"http://valadoc.org/#!api=gtk+-3.0/Gtk.Orientable\"><code>Gtk.Orientable</code></a>. These aren’t widgets that we’re going to use directly in our code, but they’re used as building blocks to create the widgets that we do use. It’s important that we understand this, because it means that when we understand how to add children to a <code>Gtk.Container</code> like <code>Gtk.Grid</code>, we also understand how to add children to a <code>Gtk.Container</code> like <code>Gtk.Toolbar</code>. Both Grid and Toolbar are widgets that are subclasses of the more abstract class <code>Gtk.Container</code>.",
    "If you want to understand more about these widgets and the parts of Gtk that they subclass, jump over to <a href=\"http://valadoc.org/\">Valadoc</a> and search for a widget like <code>Gtk.Grid</code>. See that big tree at the top of the page? It shows you every component of Gtk that <code>Gtk.Grid</code> subclasses and even what those components subclass. Having a lower level knowledge of Gtk will help you to implement widgets you haven’t worked with before since you will understand how their parent classes work.": "If you want to understand more about these widgets and the parts of Gtk that they subclass, jump over to <a href=\"http://valadoc.org/\">Valadoc</a> and search for a widget like <code>Gtk.Grid</code>. See that big tree at the top of the page? It shows you every component of Gtk that <code>Gtk.Grid</code> subclasses and even what those components subclass. Having a lower level knowledge of Gtk will help you to implement widgets you haven’t worked with before since you will understand how their parent classes work.",
    "Gtk.Grid": "Набор виджетов",
    "Now that we’ve gotten that out of the way, let’s get back to our Window and <code>Gtk.Grid</code>. Since you’re a master developer now, you can probably set up a new project complete with CMake, push it to Launchpad, and build a PPA in your sleep. If you want the practice, go ahead and do all of that again. Otherwise, it’s probably convenient for our testing purposes to just play around locally and build from Terminal. So code up a nice <code>Gtk.Window</code> without anything in it and make sure that builds. Ready? Let’s add a Grid.": "Now that we’ve gotten that out of the way, let’s get back to our Window and <code>Gtk.Grid</code>. Since you’re a master developer now, you can probably set up a new project complete with CMake, push it to Launchpad, and build a PPA in your sleep. If you want the practice, go ahead and do all of that again. Otherwise, it’s probably convenient for our testing purposes to just play around locally and build from Terminal. So code up a nice <code>Gtk.Window</code> without anything in it and make sure that builds. Ready? Let’s add a Grid.",
    "Just like when we add a Button or Label, we need to create our <code>Gtk.Grid</code>. As always, don’t copy and paste! Practice makes perfect. We create a new Gtk.Grid like this:": "Just like when we add a Button or Label, we need to create our <code>Gtk.Grid</code>. As always, don’t copy and paste! Practice makes perfect. We create a new Gtk.Grid like this:",
    "Remember that Button and Label accepted an argument (a String) in the creation method (that’s the stuff in parentheses and quotes). As shown above, <code>Gtk.Grid</code> doesn’t accept any arguments in the creation method. However, you can still change the grid’s properties (like <a href=\"http://valadoc.org/#!api=gtk+-3.0/Gtk.Orientation\">orientation</a>) as we did on the second line. Here, we’ve declared that when we add widgets to our grid, they should stack vertically.": "Remember that Button and Label accepted an argument (a String) in the creation method (that’s the stuff in parentheses and quotes). As shown above, <code>Gtk.Grid</code> doesn’t accept any arguments in the creation method. However, you can still change the grid’s properties (like <a href=\"http://valadoc.org/#!api=gtk+-3.0/Gtk.Orientation\">orientation</a>) as we did on the second line. Here, we’ve declared that when we add widgets to our grid, they should stack vertically.",
    "Let’s add some stuff to the Grid:": "Давайте добавим что-нибудь в Grid:",
    "Super easy stuff, right? We can add the grid to our window using the same method that we just used to add widgets to our grid:": "Super easy stuff, right? We can add the grid to our window using the same method that we just used to add widgets to our grid:",
    "Now build your app and see what it looks like. Since we’ve given our grid a <code>Gtk.Orientation</code> of <code>VERTICAL</code> the labels stack up on top of each other. Try creating a <code>Gtk.Grid</code> without giving it an orientation. By default, <code>Gtk.Grid</code>’s orientation is horizontal. You really only ever have to give it an orientation if you need it to be vertical.": "Now build your app and see what it looks like. Since we’ve given our grid a <code>Gtk.Orientation</code> of <code>VERTICAL</code> the labels stack up on top of each other. Try creating a <code>Gtk.Grid</code> without giving it an orientation. By default, <code>Gtk.Grid</code>’s orientation is horizontal. You really only ever have to give it an orientation if you need it to be vertical.",
    "Functionality in Gtk.Grid": "Набор возможностей в Gtk.Grid",
    "Okay, so you know all about using a <code>Gtk.Grid</code> to pack multiple children into a Window. What about using it to lay out some functionality in our app? Let’s try building an app that shows a message when we click a button. Remember in our first “Hello World” how we changed the label of the button with <code>button.clicked.connect</code>? Let’s use that method again, but instead of just changing the label of the button, we’re going to use it to change an empty label to a message.": "Okay, so you know all about using a <code>Gtk.Grid</code> to pack multiple children into a Window. What about using it to lay out some functionality in our app? Let’s try building an app that shows a message when we click a button. Remember in our first “Hello World” how we changed the label of the button with <code>button.clicked.connect</code>? Let’s use that method again, but instead of just changing the label of the button, we’re going to use it to change an empty label to a message.",
    "Let’s create a Window with a vertical Grid that contains a Button and a Label:": "Let’s create a Window with a vertical Grid that contains a Button and a Label:",
    "This time when we created our grid, we gave it another property: <code>row_spacing</code>. We can also add <code>column_spacing</code>, but since we’re stacking widgets vertically we’ll only see the effect of <code>row_spacing</code>. Notice how we can create new widgets outside the grid and then pack them into the grid by name. This is really helpful when you start using different methods to change the properties of your widgets.": "This time when we created our grid, we gave it another property: <code>row_spacing</code>. We can also add <code>column_spacing</code>, but since we’re stacking widgets vertically we’ll only see the effect of <code>row_spacing</code>. Notice how we can create new widgets outside the grid and then pack them into the grid by name. This is really helpful when you start using different methods to change the properties of your widgets.",
    "Now, let’s hook up the button to change that label. To keep our code logically separated, we’re going to add it below <code>this.add (grid);</code>. In this way, the first portion of our code defines the UI and the next portion defines the functions that we associated with the UI:": "Now, let’s hook up the button to change that label. To keep our code logically separated, we’re going to add it below <code>this.add (grid);</code>. In this way, the first portion of our code defines the UI and the next portion defines the functions that we associated with the UI:",
    "Remember, we set the button as insensitive here because clicking it again has no effect. Now compile your app and marvel at your newfound skills. Play around with orientation and spacing until you feel comfortable.": "Remember, we set the button as insensitive here because clicking it again has no effect. Now compile your app and marvel at your newfound skills. Play around with orientation and spacing until you feel comfortable.",
    "The Attach Method": "Метод присоединения",
    "While we can use <code>Gtk.Grid</code> simply to create single row or single column layouts with the add method, we can also use it to create row-and-column-based layouts with the <code>attach</code> method. First we’re going to create a new <code>Gtk.Grid</code> and set both column and row spacing, then we’ll create all the widgets we want to attach to our grid, and finally we’ll attach them.": "While we can use <code>Gtk.Grid</code> simply to create single row or single column layouts with the add method, we can also use it to create row-and-column-based layouts with the <code>attach</code> method. First we’re going to create a new <code>Gtk.Grid</code> and set both column and row spacing, then we’ll create all the widgets we want to attach to our grid, and finally we’ll attach them.",
    "Make sure to give the Grid, Buttons, and Labels unique names that you’ll remember. It’s best practice to use descriptive names so that people who are unfamiliar with your code can understand what a widget is for without having to know your app inside and out.": "Make sure to give the Grid, Buttons, and Labels unique names that you’ll remember. It’s best practice to use descriptive names so that people who are unfamiliar with your code can understand what a widget is for without having to know your app inside and out.",
    "Notice that the attach method takes 5 arguments:": "Обратите внимание, что метод attach принимает 5 аргументов",
    "The widget that you want to attach to the grid.": "Виджет, который вы хотите прикрепить к сетке.",
    "The column number to attach to starting at 0.": "Номер колонки, которую нужно прикрепить, начинается с 0.",
    "The row number to attach to starting at 0.": "Номер ряда, который нужно прикрепить, начинается с 0.",
    "The number of columns the widget should span.": "Число столбцов, который виджет должен охватить.",
    "The number of rows the widget should span.": "Число рядов, который виджет должен охватить.",
    "You can also use <code>attach_next_to</code> to place a widget next to another one on <a href=\"http://references.valadoc.org/#!api=gtk+-3.0/Gtk.PositionType\">all four sides</a>. Don’t forget to add the functionality associated with our buttons:": "You can also use <code>attach_next_to</code> to place a widget next to another one on <a href=\"http://references.valadoc.org/#!api=gtk+-3.0/Gtk.PositionType\">all four sides</a>. Don’t forget to add the functionality associated with our buttons:",
    "You’ll notice in the example code above that we’ve created a 2 x 2 grid with buttons on the left and labels on the right. The top label goes from blank to “Hello World!” and the button label is rotated 90 degrees. Notice how we gave the buttons labels that directly call out what they do to the other labels.": "You’ll notice in the example code above that we’ve created a 2 x 2 grid with buttons on the left and labels on the right. The top label goes from blank to “Hello World!” and the button label is rotated 90 degrees. Notice how we gave the buttons labels that directly call out what they do to the other labels.",
    "Let’s recap what we learned in this section:": "Давайте резюмируем то, что мы выучили в этом разделе",
    "We learned about the building blocks of Gtk and the importance of subclasses": "We learned about the building blocks of Gtk and the importance of subclasses",
    "We packed multiple children into a Window using <code>Gtk.Grid</code>": "We packed multiple children into a Window using <code>Gtk.Grid</code>",
    "We set the properties of <code>Gtk.Grid</code> including its orientation and spacing": "We set the properties of <code>Gtk.Grid</code> including its orientation and spacing",
    "We added multiple widgets into a single Gtk.Grid using the attach method to create complex layouts containing Buttons and Labels that did cool stuff.": "We added multiple widgets into a single Gtk.Grid using the attach method to create complex layouts containing Buttons and Labels that did cool stuff.",
    "Now that you understand more about Gtk, Grids, and using Buttons to alter the properties of other widgets, try packing other kinds of widgets into a window like a Toolbar and changing other properties of <a href=\"http://valadoc.org/#!api=gtk+-3.0/Gtk.Label\">Labels</a> like <code>width_chars</code> and <code>ellipsize</code>. Don’t forget to play around with the attach method and widgets that span across multiple rows and columns. Remember that Valadoc is super helpful for learning more about the methods and properties associated with widgets.": "Now that you understand more about Gtk, Grids, and using Buttons to alter the properties of other widgets, try packing other kinds of widgets into a window like a Toolbar and changing other properties of <a href=\"http://valadoc.org/#!api=gtk+-3.0/Gtk.Label\">Labels</a> like <code>width_chars</code> and <code>ellipsize</code>. Don’t forget to play around with the attach method and widgets that span across multiple rows and columns. Remember that Valadoc is super helpful for learning more about the methods and properties associated with widgets.",
    "Next Page:": "Следующая страница:",
    "Reference": "Справка"
}