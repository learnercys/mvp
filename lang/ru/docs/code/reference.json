{
    "Reference": "Материалы для ознакомления",
    "Now that you've stepped through the developer guide like a champ, we have some reference materials for you. This would be a great place to bookmark and refer back to when you have questions about elementary development.": "Теперь, когда вы закончили чтение руководства для разработчиков, мы предлагаем вам список материалов для ознакомления. Вы можете создать закладку на эту страницу и вернуться к ней, если у вас возникнут новые вопросы о разработке elementary.",
    "Code Style": "Стиль написания кода",
    "The purpose of this guide is to provide clean and accurate instructions on\nwriting good code across all elementary projects. This guideline is to be\nfollowed on every file, in order to keep our code consistent and readable. We\nare also inheriting some of the GNOME's Vala guidelines to keep our code\nconsistent with other Vala programs.": "Целью этих рекомендаций является предоставление четких и понятных инструкий\nо написании чистого кода для всех проектов elementary. Этим рекомендациям\nнужно следовать в любом файле, чтобы сохранять читаемость кода. Мы\nтакже используем некоторые рекомендации GNOME Vala, чтобы сохранять\nсхожесть нашего кода и кода других программ Vala.",
    "If the guidelines here proposed are followed, newcomers to elementary\ndevelopment will be more easily able to join the development and\nunderstand code. Besides, it'll make it easier for all developers to work on\napplications that they don't usually work on, because the code will be\nconsistent. Finally, as Guido Van Rossum said - &quot;Code is much more often read\nthan written&quot;, so having nicely written code is crucial.": "Если все будут следовать этим рекомендациям, новичкам в elementary\nбудет проще присоединиться к разработке и\nпонять код. Кроме того, разработчикам программ будет проще\nработать над разными проектами, даже если они раньше не видели их код, потому что он\nбудет схож. В конце концов, как сказал Гвидо ван Россум: \"Код гораздо чаще читают,\nчем пишут\", поэтому иметь хорошо написанный код очень важно.",
    "Whitespace": "Пробел",
    "There is no trailing whitespace at the end of a line, whether it's empty or\nnot. There is also no empty line after declaring a function:": "В конце строки не ставится пробел, независимо от того пустая она или\nнет. Также отсутствует пустая строка после объявления функции:",
    "White space comes before opening parentheses:": "Пробел обязателен перед открывающей круглой скобкой:",
    "Whitespace goes in all maths-related code, between numbers and operators.": "Пробелы должны содержаться в сравнительных и вычислительных операциях: между оператором и операндом.",
    "Indentation": "Отступы",
    "Vala code is indented using 4 spaces for consistency and readability.": "Код Vala содержит отступы в 4 пробела для схожести и читаемости.",
    "In classes, functions, loops and general flow control, the first parentheses\nis on the end of the first line (&quot;One True Brace Style&quot;), followed by the\nindented code, and a line closing the function with a curly bracket:": "В классах, функциях, циклах и конструкциях управления потоком кода, первая скобка\nостается в конце первой строки (\"One True Brace Style\"), за которой следует\nкод, содержащий отступы. Закрывающая скобка следует на отдельной строке:",
    "On conditionals and loops, always use braces even if there's only one line of code:": "В условных и циклических конструкциях, всегда используйте скобки, даже если там одна строка кода:",
    "Cuddled else and else if:": "Запутанные else и else if:",
    "If you are checking the same variable more than twice, use switch/case instead of multiple else/if:": "Если вы проверяете одну и ту же переменную более двух раз, используйте оператор switch/case вместо многих else/if проверок:",
    "Classes and files": "3. Классы и файлы",
    "Only having one class per file is recommended.": "Рекомендуется создавать только один класс на файл.",
    "All files have the same name of the class in them.": "Файлы должны иметь такое же имя, как и классы, находящиеся в них.",
    "Separate code into classes for easier extensibility.": "Разделяйте код в классы для упрощения расширяемости.",
    "Comments": "4. Комментарии",
    "Comments are either on the same line as the code or in a special line.": "Комментарии должны находиться либо на одной строке с кодом, либо в отдельной строке.",
    "Comments are indented alongside the code, and obvious comments do more harm\nthan good.": "Комментарии должны иметь такие же отступы, как и код, к которому они относятся. Очевидные комментарии приносят\nбольше вреда, чем пользы.",
    "Variable names, class names, function names": "5. Названия переменных, классов и функций",
    "Also worth referring that there should be no Hungarian notation, and no mix of\nany kinds of notations.": "Также стоит отметить, что не нужно использовать венгерскую нотацию и любые другие\nвиды нотаций.",
    "Casting": "Приведение типов",
    "Avoid using <code>as</code> keyword when casting as it might give <code>null</code> as result, which could be easily forgotten to check.": "Не следует использовать ключевое слово <code>as</code> при приведении типов, так как это может вернуть <code>null</code> как результат и поэтому потребует дополнительной проверки, о которой можно легко забыть.",
    "Vala namespaces": "Пространства имён Vala",
    "Referring to GLib is not necessary. If you want to print something:": "Явно обращаться к пространству имен GLib не обязательно. Если вы хотите что-то вывести:",
    "Opt for the second one, it's much cleaner.": "Используйте второй способ, он выглядит гораздо лучше.",
    "Columns per line": "7. Количество столбцов в строке",
    "Ideally, lines should have no more than 80 characters per line, because this\nis the default terminal size. However, as an exception, more characters could\nbe added, because most people have wide-enough monitors nowadays. The hard\nlimit is 120 characters.": "В идеальном случае, строки должны содержать не более 80 символов,\nпотому что это стандартный размер окна терминала. Несмотря на это, в качестве исключения в строку\nможет быть добавлено больше символов, потому что большинство\nразработчиков имеет достаточно широкие мониторы. Максимальное количество символов в строке - 120.",
    "GPL Header": "8. Заголовок GPL",
    "Reporting Bugs": "Отчёты об ошибках",
    "One of the big advantages of being an openly developed project is being able to take part in public bug tracking. However, if you're new to working with public bug tracking, it can be difficult to understand how to report bugs The Right Way™. So let's find out how:": "Одно из больших преимуществ опенсорс проекта - это возможность открытого багтрэкинга. Однако, если если вы новичёк в публичном багтрэкинге, то возможно вам будет сложно понять, как правильно делать репорты. Итак, давайте разберёмся:",
    "In order to file reports, you must be signed up as a member of Launchpad. If you've been through our <a href=\"/docs/code/getting-started#the-basic-setup\">development guide</a>, you already have this covered.": "Для того чтобы отправлять репорты, вы должны быть зарегистрированным членом на Launchpad. Если вы прошли <a href=\"/docs/code/getting-started#the-basic-setup\">инструкции разработчика</a>,  то вам это уже знакомо.",
    "Find the &quot;Report a Bug&quot; page for the app in question. Often times you can right-click the app in the dock, select &quot;About&quot;, and then select &quot;Report a Problem&quot;. Otherwise, you can search for the app on Launchpad, select the &quot;Bugs&quot; tab, and then &quot;Report a Bug&quot; on the right side of the page.": "Найдите страницу \"Report bug\" для рассматриваемого приложения. Довольно часто есть возможность кликнуть правой кнопкой мыши на иконке приложения в панели быстрого запуска, выбрать пункт \"About\", и затем выбрать \"Report a problem\".  Это можно сделать и другим способом - найти приложение на Launchpad, выбрать пункт \"Bugs\", и затем \"Report a Bug\" на правой части страницы.",
    "When filing a new report, launchpad will automatically check for duplicates. However, it's still a good idea to search the bug list to make sure your report hasn't been filed already. If your report has already been filed by someone else, you can mark the report as affecting you using the link on the top left of the report's page. Only comment on the report if you can provide additional useful information that may help track down the source of the issue. Do not comment things like, &quot;I have this problem too&quot; or &quot;This is a really important issue&quot;.": "Когда вы начинаете заполнять новый отчёт, панель запуска будет автоматически проверять наличие дубликатов. Эта система используется для того, чтобы искать отчеты для того чтобы знать что аналогичный был уже заполнен. Если аналогичный вашему отчету был заполнен, вы можете пометить, что эта ошибка тоже касается вас используя ссылку в верхнем левом углу страницы отчетов Только комментарий на вашем отчете может предоставить нам дополнительную полезную информацию, что поможет нам в ближайшем будущем найти источник ошибки. Не делайте комментарии типа - \"У меня тоже эта проблема\" или \"Это очень важная ошибка\".",
    "If your report has not already been filed by someone else and you've reached the &quot;Report a Bug&quot; page, type in a summary and description of the issue and select &quot;Submit&quot;. Keep in mind the following information while filing your report:": "Если ваш отчёт ещё не был заполнен кем-либо ещё и вы не нашли его на странице где находятся все отчёты пользователей, введите в определённую форму важную информацию и описание вашей проблемы и нажмите кнопку \"Submit\". Держите нас в курсе важной информации когда вы заполняете ваш отчёт:",
    "Be Specific In The Summary": "Будьте Конкретны в Итоге",
    "This will be the title of the issue in the bug tracker. It's very important to be specific because it makes it much easier for a developer or bug manager to search the issue list and helps avoid duplicate reports. A summary such as &quot;App Crashes&quot; is not good and vague requests like &quot;Increase Performance&quot; are not helpful. A good summary is something like &quot;Notification is not sent when process finishes&quot;.": "Это станет заголовком проблемы в баг-трекере. Конкретика очень важна  - это позволит разработчику или баг-менеджеру быстрее найти проблему в листе, а так же поможет избежать дубликатов. Описание вроде \"Приложение Падает\" не пойдёт, а расплывчатые запросы, такие как \"Увеличьте Производительность\" и вовсе бесполезны. Хорошее описание должно быть похоже на \"Когда процесс завершён, уведомление не отсылается\". ",
    "Avoid Subjective or Ambiguous Adjectives": "Избегайте субъективных или неоднозначных прилагательных",
    "This may sound like a repeat of the first heading, but it's important when you want someone to confirm your report. Don't say that something is &quot;jarring&quot; or &quot;unintuitive&quot;. Instead describe what happened and contrast it with what you expected to happen. &quot;The panel suddenly appeared instead of being animated in,&quot; describes the problem in a way that is actionable and objective.": "Это звучит, как повторение предыдущего абзаца, но это важно, если вы хотите, чтобы ваш отчет об ошибке был рассмотрен. Не пишите, если что-то \"раздражает\" или \"непонятно\". Лучше опишите, что именно произошло и чего вы ожидали. Например, \"панель появилась резко вместо отображения с плавной анимацией\" - это описывает проблему объективно.",
    "Be Concise, But Explain The Issue": "Коротко объясни проблему",
    "First of all, it's important to mention that bug reports should be written in English and you should, if possible, watch out for your language and grammar.": "Прежде всего, важно отметить, что сообщения об ошибках должны быть написаны на английском языке, и вы должны, если это возможно, следить за своим языком и грамматикой.",
    "The most important thing for a report is that the developer must be able to reproduce the issue. If necessary, include exact numbered steps to reproduce the issue. Include relevant information like your OS version, any modifications you've made to the system (like changing your window manager or kernel), or the version numbers of relevant libraries like Gtk or WebKit. If you're reporting a crash, make sure to <a href=\"https://wiki.debian.org/HowToGetABacktrace\">include a backtrace</a>.": "Очень важно, чтобы разработчик мог воспроизвести проблему. Если необходимо, укажите конкретное количество шагов для воспроизведения проблемы. Укажите дополнительную информацию - версию операционной системы, делали ли вы изменения в системе (например, меняли ли вы оконный менеджер или ядро системы), номер версий библиотек, например, Gtk или WebKit. Если ваш отчет об ошибке содержит информации о падении приложения, включите в отчет <a href=\"https://wiki.debian.org/HowToGetABacktrace\">трейсы</a>.",
    "Be Prepared To Provide More Information": "Будьте готовы предоставить больше информации",
    "If your report does not contain enough information for the developer to reproduce the issue, it may be marked as &quot;Incomplete&quot;. Oftentimes, a developer will make a comment requesting additional specific information. If you do not provide that information, your report will eventually expire.": "Если ваш отчет не содержит достаточно информации для разработчиков, чтобы воспроизвести проблему, он может быть отмечен как \"неполный\". Часто разработчик делает комментарий с просьбой представить дополнительную конкретную информацию. Если вы не предоставите эту информацию, ваш отчет в конечном итоге будет отклонен.",
    "If you've reported your issue against the wrong app, a developer may mark it as &quot;Invalid&quot;. If the developer knows which app you meant to report against, they may re-assign the issue. However, if they do not you must find the correct app and re-assign the report yourself.": "Если вы неверно указали приложение в отчете об ошибке, разработчик может пометить отчет как \"неверный\". Если разработчик догадался, какое приложение вы имели в виду, он может переназначить отчет об ошибке на него. Однако, если этого не происходит, вы должны самостоятельно переназначить отчет об ошибке на правильное приложение.",
    "If you're reporting a &quot;Wishlist&quot; issue, like a feature request, a developer may mark your bug as &quot;Opinion&quot; or &quot;Won't Fix&quot;. Developers are often open to discussion about these kinds of issues, but please do not harass a developer for marking your report this way.": "Если Вы сообщаете о проблеме из списка \"Wishlist\", в качестве запроса на улучшение то, другой разработчик может пометить Вашу ошибку как \"Opinion\" или \"Won't Fix\". Разработчики часто готовы обсуждать проблемы этого типа, но пожалуйста, не беспокойте разработчика для того, чтобы он обратил внимание на Ваш запрос.",
    "You Can Get a Bit of Help": "Вы можете получить немного помощи",
    "If you're not sure about anything above, you are always welcome to our development IRC channel: #elementary-dev on irc.freenode.net. We might be able to help you track down the actual project where you should report the issue, or perhaps even aid you with any English language issue you might come across. Most developers want to help you make good bug reports.": "Если вы в чем-то сомневаетесь, добро пожаловать на наш IRC канал: #elementary-dev на irc.freenode.net. Мы можем помочь вам понять, к какому актуальному проекту относится ваша проблема, или даже с любой проблемой, если вы владеете английским языком. Наши разработчики хотят помочь вам делать хорошие отчеты об ошибках.",
    "Don't Confirm Reports for Other People's Apps": "Не присылайте отчёты других людей",
    "If a report affects you, mark it using the link. Do not confrim your own reports. Even if you are 100% sure that you are right, just don't do it. It's not good bug tracker etiquette. A bug manager or developer for the app will confirm the report when they are able to review it.": "Если отчёт  затрагивает Вас  то, отметьте его используя ссылку. Не подтверждайте  Ваши собственные отчёты. Даже если вы на 100% уверены, что Вы правы, всё равно не делайте этого. Это нарушает этикет, принятому в системе отслеживания ошибок. Менеджер системы отслеживания ошибок или разработчик этого приложения подтвердит Ваш отчёт, когда будет в состоянии рассмотреть его.",
    "Don't Make &quot;Me Too&quot; Comments": "Не пиши в комментариях \"У меня тоже !\"",
    "We mentioned this earlier, but it's worth mentioning again. Do not make comments that simply say &quot;This issue affects me as well&quot;. This clutters up the tracker. Only comment if you are providing additional information that helps find the source of the issue. If you only want to let a developer know that you are affected, use the green link that says, &quot;Does this bug affect you?&quot; under the report's title.": "We mentioned this earlier, but it's worth mentioning again. Do not make comments that simply say \"This issue affects me as well\". This clutters up the tracker. Only comment if you are providing additional information that helps find the source of the issue. If you only want to let a developer know that you are affected, use the green link that says, \"Does this bug affect you?\" under the report's title.",
    "Proposing Design Changes": "Предложение правок дизайна",
    "elementary has always been known for its strong focus on great design, but if you’re an up and coming designer you might not know how to get developers to pay attention to you. This reference guide is about how to effectively propose a design change in a way that makes it more likely for your design to become implemented.": "elementary has always been known for its strong focus on great design, but if you’re an up and coming designer you might not know how to get developers to pay attention to you. This reference guide is about how to effectively propose a design change in a way that makes it more likely for your design to become implemented.",
    "Don't Make Demands": "Не просите",
    "Let’s say you spent the last few hours re-designing the Search Engine Manager dialog in Midori and you want to bring this work to the attention of Midori’s developers. You could file a bug report something like “Search engine popup sucks” and paste your mockup and be done. But that approach isn’t going to win you any friends and your report will probably be marked “opinion” or “invalid”. Instead, we should consider the amount of work it will take to implement the new design and try to present it in a way that gets developers excited about the overall vision without demanding 1,000 lines of code in one shot.": "Let’s say you spent the last few hours re-designing the Search Engine Manager dialog in Midori and you want to bring this work to the attention of Midori’s developers. You could file a bug report something like “Search engine popup sucks” and paste your mockup and be done. But that approach isn’t going to win you any friends and your report will probably be marked “opinion” or “invalid”. Instead, we should consider the amount of work it will take to implement the new design and try to present it in a way that gets developers excited about the overall vision without demanding 1,000 lines of code in one shot.",
    "Use Blueprints": "Используйте чертежи",
    "Firstly, we want to present the overall vision of our grand new design. So we should file a new blueprint (in this example, we’d file it <a href=\"http://blueprints.launchpad.net/midori\">here</a>). Name it something explicit and try to avoid titles that marginalize developer’s existing work. Something like “search-engine-manager-redesign” works just fine. In this blueprint we want to describe our motivations for the redesign. What are the problems with the current design and what does our new design aim to solve? Common reasons for a redesign can include minimizing window chrome, taking advantage of new toolkit elements, making the UI more consistent with other apps, etc. This is also a good place to link to that mockup we were talking about earlier. If your design is really involved, you can even link to an external specification (Google Docs work great for getting feedback) where you have a chance to really get into the nitty gritty of your idea.": "Firstly, we want to present the overall vision of our grand new design. So we should file a new blueprint (in this example, we’d file it <a href=\"http://blueprints.launchpad.net/midori\">here</a>). Name it something explicit and try to avoid titles that marginalize developer’s existing work. Something like “search-engine-manager-redesign” works just fine. In this blueprint we want to describe our motivations for the redesign. What are the problems with the current design and what does our new design aim to solve? Common reasons for a redesign can include minimizing window chrome, taking advantage of new toolkit elements, making the UI more consistent with other apps, etc. This is also a good place to link to that mockup we were talking about earlier. If your design is really involved, you can even link to an external specification (Google Docs work great for getting feedback) where you have a chance to really get into the nitty gritty of your idea.",
    "Create Concise Work Items": "Создавать лаконичные элементы работы",
    "Now that you’ve laid out the motivations for your design and explained the overall vision, you should break it up into small, actionable work items (also called bug reports). To continue our example, I would have reports like “Change Search Engine Manager Dialog to Popover”, “Re-order Search Engines with Drag and Drop”, “Open Search Engine Manager by clicking Search icon in URL Bar”, “Show edit and remove buttons next to engine in Search Engine Manager”, etc etc. Each bug report should describe just one small change. We do this for several reasons:": "Now that you’ve laid out the motivations for your design and explained the overall vision, you should break it up into small, actionable work items (also called bug reports). To continue our example, I would have reports like “Change Search Engine Manager Dialog to Popover”, “Re-order Search Engines with Drag and Drop”, “Open Search Engine Manager by clicking Search icon in URL Bar”, “Show edit and remove buttons next to engine in Search Engine Manager”, etc etc. Each bug report should describe just one small change. We do this for several reasons:",
    "It allows developers to deny one request without denying all of them. Face it: your design isn’t perfect and it’s very possible that a developer isn’t going to like part of it. By breaking up your design into little pieces, it allows a developer to incorporate the changes they like and ignore the ones they don’t.": "It allows developers to deny one request without denying all of them. Face it: your design isn’t perfect and it’s very possible that a developer isn’t going to like part of it. By breaking up your design into little pieces, it allows a developer to incorporate the changes they like and ignore the ones they don’t.",
    "It makes your design less intimidating. A big redesign means lots of lines of code. If your changes look like too much of a hassle, you’re going to have a hard time getting a developer to work on them. But if you present small changes that can be incorporated a bit at a time, there’s a bigger chance that your whole design will eventually be implemented.": "It makes your design less intimidating. A big redesign means lots of lines of code. If your changes look like too much of a hassle, you’re going to have a hard time getting a developer to work on them. But if you present small changes that can be incorporated a bit at a time, there’s a bigger chance that your whole design will eventually be implemented.",
    "It allows developers to track their progress. Once again, big designs take time to implement. Even if a developer wants to implement the whole thing right away, they might not be able to. Giving them a way to “check off” pieces as they go makes it more likely that a part of your design won’t be forgotten about when it’s translated into code.": "It allows developers to track their progress. Once again, big designs take time to implement. Even if a developer wants to implement the whole thing right away, they might not be able to. Giving them a way to “check off” pieces as they go makes it more likely that a part of your design won’t be forgotten about when it’s translated into code.",
    "File Compelling Reports": "File Compelling Reports",
    "Don’t forget to make your reports compelling. It’s up to you to sell the merits of each change. Cite the HIG, prior-art, user complaints, articles by other designers, and present your changes in a logical, non-opinionated, and concise manner. It also doesn’t hurt to speak in developer terms. Brush up on the names of widgets in Gtk and Granite, get familiar with available libraries like Zeitgeist and Unity, and don’t forget about system components like PulseAudio or Contractor. Also, whatever you do, don’t be presumptuous and confirm your own bug reports. You wouldn’t ask a friend for a favor and then answer yourself for them, so don’t do it here either. See <a href=\"#reporting-bugs\">the above section</a> for a refresher on filing good bug reports.": "Don’t forget to make your reports compelling. It’s up to you to sell the merits of each change. Cite the HIG, prior-art, user complaints, articles by other designers, and present your changes in a logical, non-opinionated, and concise manner. It also doesn’t hurt to speak in developer terms. Brush up on the names of widgets in Gtk and Granite, get familiar with available libraries like Zeitgeist and Unity, and don’t forget about system components like PulseAudio or Contractor. Also, whatever you do, don’t be presumptuous and confirm your own bug reports. You wouldn’t ask a friend for a favor and then answer yourself for them, so don’t do it here either. See <a href=\"#reporting-bugs\">the above section</a> for a refresher on filing good bug reports.",
    "Be Prepared to Iterate": "Be Prepared to Iterate",
    "Don’t be upset if a developer plainly states that they don’t want to implement your idea. Remember that they have plans too. You might have to go back to the drawing board a bit. Listen to their feedback. Your design might be a little over-engineered, it might conflict with other designs being worked on, or maybe it’s just in conflict with the goals and scope of the app. Remember that you’re in the position of requesting someone to devote their time to something. You’re asking for a favor. Don’t be afraid to argue a position within polite reason, but remember to stay humble.": "Don’t be upset if a developer plainly states that they don’t want to implement your idea. Remember that they have plans too. You might have to go back to the drawing board a bit. Listen to their feedback. Your design might be a little over-engineered, it might conflict with other designs being worked on, or maybe it’s just in conflict with the goals and scope of the app. Remember that you’re in the position of requesting someone to devote their time to something. You’re asking for a favor. Don’t be afraid to argue a position within polite reason, but remember to stay humble."
}