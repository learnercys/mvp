{
    "Reference": "参考文档",
    "Now that you've stepped through the developer guide like a champ, we have some reference materials for you. This would be a great place to bookmark and refer back to when you have questions about elementary development.": "现在你可以自信的阅读开发者指导，我们为你准备了相关资料。推荐你将此页面收藏，遇到 elementary 开发相关的问题，来这里吧！",
    "Code Style": "代码风格",
    "The purpose of this guide is to provide clean and accurate instructions on\nwriting good code across all elementary projects. This guideline is to be\nfollowed on every file, in order to keep our code consistent and readable. We\nare also inheriting some of the GNOME's Vala guidelines to keep our code\nconsistent with other Vala programs.": "此指南是为所有 elementary 项目能够保持良好一致代码风格所提供的说明。\n此说明适用于所有相关文件，以确保我们的代码是一致的和可读的。 \n我们也继承了一些 GNOME 的 Vala 说明，以确保我们的代码与其他Vala程序保持一致。",
    "If the guidelines here proposed are followed, newcomers to elementary\ndevelopment will be more easily able to join the development and\nunderstand code. Besides, it'll make it easier for all developers to work on\napplications that they don't usually work on, because the code will be\nconsistent. Finally, as Guido Van Rossum said - &quot;Code is much more often read\nthan written&quot;, so having nicely written code is crucial.": "如果你是刚来到 elementary，遵循此说明会让\n你更容易理解这些代码\n此外，这样更容易让其他开发者这接手代码，因为风格是一致的。\n最后，吉多·范罗苏姆说过 - “遵守规则写出的代码阅读性要优于不遵守规则写出的代码”，所以编写良好的代码是很重要的。",
    "Whitespace": "空格",
    "There is no trailing whitespace at the end of a line, whether it's empty or\nnot. There is also no empty line after declaring a function:": "每一行的末尾不应该有空格，不论这行有没有内容。\n每个函数声明的后面也不应该有空行。",
    "White space comes before opening parentheses:": "每个开始括号之前都应该有一个空格：",
    "Whitespace goes in all maths-related code, between numbers and operators.": "数学表达式中的操作数与运算符之间的空格也是必要的。",
    "Indentation": "缩进",
    "Vala code is indented using 4 spaces for consistency and readability.": "在 Vala 里使用4个空格的缩进来保持一致性和可读性。",
    "In classes, functions, loops and general flow control, the first parentheses\nis on the end of the first line (&quot;One True Brace Style&quot;), followed by the\nindented code, and a line closing the function with a curly bracket:": "在类、函数、循环和一般的顺序结构中，左大括号跟在第一行的末尾，接着一行是带了缩进的其他代码，右大括号则应该在单独的一行来关闭函数。",
    "On conditionals and loops, always use braces even if there's only one line of code:": "在条件语句和循环语句当中，应当总是用大括号包裹住其所属代码，即使只有一行代码。",
    "Cuddled else and else if:": "同样的规则适用于 else 和 else if ：",
    "If you are checking the same variable more than twice, use switch/case instead of multiple else/if:": "如果一个变量的值需要判断两次以上，使用 switch/case  语句替代多个 else/if 。",
    "Classes and files": "类和文件",
    "Only having one class per file is recommended.": "每个类只有一个与其对应的文件。",
    "All files have the same name of the class in them.": "在所有的文件当中，同一个类的名称应当是一致的。",
    "Separate code into classes for easier extensibility.": "尽量提取代码中相同的部分，抽象成类以易于扩展。",
    "Comments": "注释",
    "Comments are either on the same line as the code or in a special line.": "注释都要在同一行内，即使那一行有代码。",
    "Comments are indented alongside the code, and obvious comments do more harm\nthan good.": "在同一行中，代码后面的注释要缩进。过于显眼的注释危害大于处。",
    "Variable names, class names, function names": "变量名、类名、函数名",
    "Also worth referring that there should be no Hungarian notation, and no mix of\nany kinds of notations.": "另外要说的是，代码中不应该出现匈牙利注释和任何混合符号。",
    "Casting": "值传递",
    "Avoid using <code>as</code> keyword when casting as it might give <code>null</code> as result, which could be easily forgotten to check.": "避免使用<code>as</code>关键字传值，它有可能把<code>null</code>作为传递结果。这样很容易就忘了检查。",
    "Vala namespaces": "Vala 命名空间",
    "Referring to GLib is not necessary. If you want to print something:": "使用 GLib 不是必需的。你可以参照下面的打印：",
    "Opt for the second one, it's much cleaner.": "推荐使用第二个，这样更简介。",
    "Columns per line": "每行的内容",
    "Ideally, lines should have no more than 80 characters per line, because this\nis the default terminal size. However, as an exception, more characters could\nbe added, because most people have wide-enough monitors nowadays. The hard\nlimit is 120 characters.": "推荐每行不超过 80 格字符，因为这是终端的默认大小。当然，可以超过 80 个，因为现在大多数人都有足够宽的显示器。不过每行 120 个字符是极限。",
    "GPL Header": "GPL 头",
    "Reporting Bugs": "Bug 提交",
    "One of the big advantages of being an openly developed project is being able to take part in public bug tracking. However, if you're new to working with public bug tracking, it can be difficult to understand how to report bugs The Right Way™. So let's find out how:": "开源的一个好处就是大家可以一起找代码。然而，新手一般很难理解怎样用正确的方式提交 Bug 。现在来看看它是怎么工作的吧：",
    "In order to file reports, you must be signed up as a member of Launchpad. If you've been through our <a href=\"/docs/code/getting-started#the-basic-setup\">development guide</a>, you already have this covered.": "为了上传报告，你必须以会员的身份登录 Launchpad 。如果你阅读过我们的<a href=\"/docs/code/getting-started#the-basic-setup\">开发者指南</a>，可以略过下面的部分。",
    "Find the &quot;Report a Bug&quot; page for the app in question. Often times you can right-click the app in the dock, select &quot;About&quot;, and then select &quot;Report a Problem&quot;. Otherwise, you can search for the app on Launchpad, select the &quot;Bugs&quot; tab, and then &quot;Report a Bug&quot; on the right side of the page.": "找到问题应用的“提交 Bug”页面，多数情况下你可以右击 dock 栏上的应用，选择“About“，然后选择”Report a Problem“。另外，你可以在 Launchpad 上搜索问题应用，选择“Bugs”标签，然后选择页面右边的“Report a Bug”。",
    "When filing a new report, launchpad will automatically check for duplicates. However, it's still a good idea to search the bug list to make sure your report hasn't been filed already. If your report has already been filed by someone else, you can mark the report as affecting you using the link on the top left of the report's page. Only comment on the report if you can provide additional useful information that may help track down the source of the issue. Do not comment things like, &quot;I have this problem too&quot; or &quot;This is a really important issue&quot;.": "当填写一个新报告时，launchpad 会自动检查备份。当然，在 Bug 列表搜索你提交的报告以确认提交成功仍然是一个好的习惯。如果你提交的 Bug 已经被别人提交过了，你可以在那个报告页面的左上角的链接上标记你也碰到这个问题了。在你可以帮助找到问题根源的时候发表评论，不要发表类似“我也有这个问题”或者“这是一个重要问题”的言论。",
    "If your report has not already been filed by someone else and you've reached the &quot;Report a Bug&quot; page, type in a summary and description of the issue and select &quot;Submit&quot;. Keep in mind the following information while filing your report:": "如果你的问题并没有被其他人提交，你可以到“Report a Bug\"页面，写下概述并描述问题，然后提交。在提交问题时需要记住遵守下列信息：",
    "Be Specific In The Summary": "准确的概述",
    "This will be the title of the issue in the bug tracker. It's very important to be specific because it makes it much easier for a developer or bug manager to search the issue list and helps avoid duplicate reports. A summary such as &quot;App Crashes&quot; is not good and vague requests like &quot;Increase Performance&quot; are not helpful. A good summary is something like &quot;Notification is not sent when process finishes&quot;.": "在追踪 Bug 的过程中，概述会成为此问题的标题。将问题描述清楚很重要，这样可以使开发者和 Bug 管理者搜索相关问题时避免重复。将问题的详细信息简单的描述为“应用崩溃”是不准确的，又如类似“增加流畅度”类似的模糊请求是起不到帮助作用地。好的概述如这个例子：“过程结束后通知为及时发送”。",
    "Avoid Subjective or Ambiguous Adjectives": "避免主观判断和模糊描述",
    "This may sound like a repeat of the first heading, but it's important when you want someone to confirm your report. Don't say that something is &quot;jarring&quot; or &quot;unintuitive&quot;. Instead describe what happened and contrast it with what you expected to happen. &quot;The panel suddenly appeared instead of being animated in,&quot; describes the problem in a way that is actionable and objective.": "这像是前面第一个的重复，但这在他人确认你的报告时非常重要。别说一些像不符合逻辑啊或者很容易看到啊的模糊回答。要描述清楚发生了什么和你所期望要发生的。“面板没有动画的忽然出现了”，要描述客观，可操作复现。",
    "Be Concise, But Explain The Issue": "简洁解释",
    "First of all, it's important to mention that bug reports should be written in English and you should, if possible, watch out for your language and grammar.": "首先，报告应该用英语描述，并且请尽量注意你的语言和语法。",
    "The most important thing for a report is that the developer must be able to reproduce the issue. If necessary, include exact numbered steps to reproduce the issue. Include relevant information like your OS version, any modifications you've made to the system (like changing your window manager or kernel), or the version numbers of relevant libraries like Gtk or WebKit. If you're reporting a crash, make sure to <a href=\"https://wiki.debian.org/HowToGetABacktrace\">include a backtrace</a>.": "报告中最重要的是开发者必需能够复现那个 Bug 。有必要的话，列出详细的步骤，还有所使用的系统版本(你对系统和系统内核做出的更改)，以及相关库的版本号，例如 Gtk、Webkit。如果你报告一个崩溃，请确认 <a href=\"https://wiki.debian.org/HowToGetABacktrace\">包含 backtrace </a> 。",
    "Be Prepared To Provide More Information": "准备提供更过的信息",
    "If your report does not contain enough information for the developer to reproduce the issue, it may be marked as &quot;Incomplete&quot;. Oftentimes, a developer will make a comment requesting additional specific information. If you do not provide that information, your report will eventually expire.": "如果你所提供的报告不足以使开发者复现相关问题，该报告就会被标记为“Incomplete（未完成）”。多数情况下，开发者会评论并要求提供更多的相关信息。如果你不补充，你的报告会被关闭。",
    "If you've reported your issue against the wrong app, a developer may mark it as &quot;Invalid&quot;. If the developer knows which app you meant to report against, they may re-assign the issue. However, if they do not you must find the correct app and re-assign the report yourself.": "如果你所报告的应用不是当前应用有误，开发者会将其标记为“Invaild（无效）”。如果开发者知道你所描述的确切应用，他们会重新分类该问题。如果开发者没有纠正并重新分类你所报告的应用，那就需要你自己动手了。",
    "If you're reporting a &quot;Wishlist&quot; issue, like a feature request, a developer may mark your bug as &quot;Opinion&quot; or &quot;Won't Fix&quot;. Developers are often open to discussion about these kinds of issues, but please do not harass a developer for marking your report this way.": "如果你提交的是一个希望清单，比如一个添加功能请求，开发者可能会将你的报告标记为“Opinion 可选 ”或者“Won't Fix 不予受理 ”。开发者通常不会公开讨论此类问题，所以请不要麻烦开发者用这种方式标记你的报告。",
    "You Can Get a Bit of Help": "你可以得到一点帮助",
    "If you're not sure about anything above, you are always welcome to our development IRC channel: #elementary-dev on irc.freenode.net. We might be able to help you track down the actual project where you should report the issue, or perhaps even aid you with any English language issue you might come across. Most developers want to help you make good bug reports.": "如果你不是很确定上面所讲到的，欢迎来到我们的 IRC 开发频道：#elementary-dev，位于irc.freenode.net 。我们可能会帮助你在哪提交报告，或者尽量理解你的英语并帮助你。大多数开发者会帮助你成为一个好的 Bug 提交者。",
    "Don't Confirm Reports for Other People's Apps": "不要重复提交报告",
    "If a report affects you, mark it using the link. Do not confrim your own reports. Even if you are 100% sure that you are right, just don't do it. It's not good bug tracker etiquette. A bug manager or developer for the app will confirm the report when they are able to review it.": "如果那个 Bug 你也碰到了，用链接标记就行。不要重复提交报告，即使你是认为你是 100% 正确地，别那样做。这涉及 Bug 提交者的礼貌问题。Bug 管理者或者开发者会在确认 Bug 复现以后确认那个报告。",
    "Don't Make &quot;Me Too&quot; Comments": "不要发表“我也是”",
    "We mentioned this earlier, but it's worth mentioning again. Do not make comments that simply say &quot;This issue affects me as well&quot;. This clutters up the tracker. Only comment if you are providing additional information that helps find the source of the issue. If you only want to let a developer know that you are affected, use the green link that says, &quot;Does this bug affect you?&quot; under the report's title.": "我们之前提到过这一点，但仍然值得在提一便。不要发表类似“这个 bug 我也碰到了”的简单评论。这会分散 Bug 跟踪者的注意力。只有在你提供能够帮助开发者找到问题根源的信息时，在评论。如果你想要开发者了解你也受影响了，点击标题下面的“Does this bug affet you? 你也收到这个 bug 影响了吗”的绿色链接。",
    "Proposing Design Changes": "设计更改请求",
    "elementary has always been known for its strong focus on great design, but if you’re an up and coming designer you might not know how to get developers to pay attention to you. This reference guide is about how to effectively propose a design change in a way that makes it more likely for your design to become implemented.": "elementary 以好设计和专注力被人们所知，如果你是一个上进的但不知道如何让开发者注意到你的设计师。那么这部分指导帮助你如何有效的提交设计更改请求，实现你的设计。",
    "Don't Make Demands": "不要使用命令式的语气",
    "Let’s say you spent the last few hours re-designing the Search Engine Manager dialog in Midori and you want to bring this work to the attention of Midori’s developers. You could file a bug report something like “Search engine popup sucks” and paste your mockup and be done. But that approach isn’t going to win you any friends and your report will probably be marked “opinion” or “invalid”. Instead, we should consider the amount of work it will take to implement the new design and try to present it in a way that gets developers excited about the overall vision without demanding 1,000 lines of code in one shot.": "假设你花费了几个小时重新设计 Midori 的搜索引擎管理对话框，并且你想引起 Midori 开发者的注意。你提交了一个类似于“搜索引擎弹出效果太逊”的报告，然后粘贴上你的样本。但是这种方法不会使你交到别的朋友，而且你的报告也会被标记为“opinion 待定”或者“invalid 无效” 。相反，我们需要思考大量的关于实现新的设计的工作，并且还要使开发者们喜欢总体的视觉效果，而不是命令他们用 1000 行代码直接完成。",
    "Use Blueprints": "使用蓝图",
    "Firstly, we want to present the overall vision of our grand new design. So we should file a new blueprint (in this example, we’d file it <a href=\"http://blueprints.launchpad.net/midori\">here</a>). Name it something explicit and try to avoid titles that marginalize developer’s existing work. Something like “search-engine-manager-redesign” works just fine. In this blueprint we want to describe our motivations for the redesign. What are the problems with the current design and what does our new design aim to solve? Common reasons for a redesign can include minimizing window chrome, taking advantage of new toolkit elements, making the UI more consistent with other apps, etc. This is also a good place to link to that mockup we were talking about earlier. If your design is really involved, you can even link to an external specification (Google Docs work great for getting feedback) where you have a chance to really get into the nitty gritty of your idea.": "首先，我们想展示全新的设计。所以我们应该提交一个新的蓝图（例如，我们在<a href=\"http://blueprints.launchpad.net/midori\">这里</a>提交）。命名一个明确的但与当前已存在工作不重复的名称。例如“search-engine-manager-redesign\"。在蓝图里我们会说明重新设计的理由、当前设计存在的问题以及要解决的问题。理由通常包括优化窗口最小化效果、加入新特性、使 UI 与其他应用更加统一等等。如果你对设计很投入，你甚至可以链接到外部特定的位置（在 Google Doc 里反馈是一个不错的选择），来详细阐述你的设计思想。",
    "Create Concise Work Items": "创造简明的工作项目",
    "Now that you’ve laid out the motivations for your design and explained the overall vision, you should break it up into small, actionable work items (also called bug reports). To continue our example, I would have reports like “Change Search Engine Manager Dialog to Popover”, “Re-order Search Engines with Drag and Drop”, “Open Search Engine Manager by clicking Search icon in URL Bar”, “Show edit and remove buttons next to engine in Search Engine Manager”, etc etc. Each bug report should describe just one small change. We do this for several reasons:": "在阐述了设计动机和整个蓝图后，你应该把它分成小的，可操作的工作项目（也叫 bug 报告）。继续上面的例子，我会报告“Change Search Engine Manager Dialog to Popover”，“Re-order Search Engines with Drag and Drop”，“Open Search Engine Manager by clicking Search icon in URL Bar”，“Show edit and remove buttons next to engine in Search Engine Manager”，等等。每个 bug 报告应该只描述一个小改变。这样做有下面几个原因：",
    "It allows developers to deny one request without denying all of them. Face it: your design isn’t perfect and it’s very possible that a developer isn’t going to like part of it. By breaking up your design into little pieces, it allows a developer to incorporate the changes they like and ignore the ones they don’t.": "这要允许开发者可以拒绝单个的请求而不涉及全部。你要面对的是：你的设计并不完美而且很可能是由开发者的审美决定。通过把你的设计分成一小片一小片的，这样允许开发者合并他们喜欢的变化，忽略他们不喜欢的。",
    "It makes your design less intimidating. A big redesign means lots of lines of code. If your changes look like too much of a hassle, you’re going to have a hard time getting a developer to work on them. But if you present small changes that can be incorporated a bit at a time, there’s a bigger chance that your whole design will eventually be implemented.": "它使你的设计不至于太吓人。一个大的设计改变意味着大量的代码。如果你的设计争议较多，你要做好长期对开发者做思想工作的准备。如果你申请的小变化合并到代码只需花费少量的时间，那么你整个设计最终被实现的机会会很大。",
    "It allows developers to track their progress. Once again, big designs take time to implement. Even if a developer wants to implement the whole thing right away, they might not be able to. Giving them a way to “check off” pieces as they go makes it more likely that a part of your design won’t be forgotten about when it’s translated into code.": "它使开发者们可以跟踪相关的进度。在重复一遍，大的设计需要花费时间去实现。即使开发者想立刻实现所有的设计，他们也可能做不到。让他们一步一步的完成，这样就能保证所有的细节都能被翻译成代码。",
    "File Compelling Reports": "醒目的报告",
    "Don’t forget to make your reports compelling. It’s up to you to sell the merits of each change. Cite the HIG, prior-art, user complaints, articles by other designers, and present your changes in a logical, non-opinionated, and concise manner. It also doesn’t hurt to speak in developer terms. Brush up on the names of widgets in Gtk and Granite, get familiar with available libraries like Zeitgeist and Unity, and don’t forget about system components like PulseAudio or Contractor. Also, whatever you do, don’t be presumptuous and confirm your own bug reports. You wouldn’t ask a friend for a favor and then answer yourself for them, so don’t do it here either. See <a href=\"#reporting-bugs\">the above section</a> for a refresher on filing good bug reports.": "Don’t forget to make your reports compelling. It’s up to you to sell the merits of each change. Cite the HIG, prior-art, user complaints, articles by other designers, and present your changes in a logical, non-opinionated, and concise manner. It also doesn’t hurt to speak in developer terms. Brush up on the names of widgets in Gtk and Granite, get familiar with available libraries like Zeitgeist and Unity, and don’t forget about system components like PulseAudio or Contractor. Also, whatever you do, don’t be presumptuous and confirm your own bug reports. You wouldn’t ask a friend for a favor and then answer yourself for them, so don’t do it here either. See <a href=\"#reporting-bugs\">the above section</a> for a refresher on filing good bug reports.",
    "Be Prepared to Iterate": "做好迭代的准备",
    "Don’t be upset if a developer plainly states that they don’t want to implement your idea. Remember that they have plans too. You might have to go back to the drawing board a bit. Listen to their feedback. Your design might be a little over-engineered, it might conflict with other designs being worked on, or maybe it’s just in conflict with the goals and scope of the app. Remember that you’re in the position of requesting someone to devote their time to something. You’re asking for a favor. Don’t be afraid to argue a position within polite reason, but remember to stay humble.": "当开发者简单的回复他们不想实现你的想法，别沮丧。他们还有其他的计划。你可能需要回去完善一下。听听他们的反馈。你的设计可能是难于实现，也可能是与其他的设计发生了冲突，或者只是与该应用的目标和适用范围发生了冲突。要知道你处于一个让他人投入时间来实现你的设计的位置。你在请求帮助。要礼貌的争论，但记得谦逊。"
}